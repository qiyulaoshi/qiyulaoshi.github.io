(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{780:function(t,s,a){"use strict";a.r(s);var e=a(34),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"git是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git是什么"}},[t._v("#")]),t._v(" Git是什么？")]),t._v(" "),a("p",[t._v("Git 是一个开源的分布式版本控制系统.")]),t._v(" "),a("h2",{attrs:{id:"什么是版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本控制"}},[t._v("#")]),t._v(" 什么是版本控制？")]),t._v(" "),a("p",[t._v("版本控制是一种记录一个或若干文件内容变化,以便将来查阅特定版本修订情况的系统.")]),t._v(" "),a("h3",{attrs:{id:"集中化的版本控制系统和分布式版本控制系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中化的版本控制系统和分布式版本控制系统"}},[t._v("#")]),t._v(" 集中化的版本控制系统和分布式版本控制系统")]),t._v(" "),a("p",[t._v("集中化的版本控制系统,都有一个单一的集中管理的服务器,保存所有文件的修订版本,而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新.也就是说,  "),t._v("是多对一,如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/03/14/5c8a2964c00a2.png",alt:"未命名文件.png"}})]),t._v(" "),a("p",[t._v("这样做最显而易见的缺点就是服务器很容易发生单点故障而导致的全线奔溃.比如某一天服务器突然宕机,那么在宕机的这段时间内,所有的协同工作者均无法提交更新,无法实现协同工作,一旦服务器的磁盘受损,恰巧没有对文件进行备份,那就会发生数据丢失的惨剧.这个项目就相当于完全归零（"),a("s",[t._v("删库跑路")]),t._v("）🙃️\n分布式版本控制系统的客户端并不只提取最新版本的文件快照,而是把代码仓库完整地镜像备份下来.这么一来,任何一处协同工作用的服务器发生故障,事后都可以用任何一个镜像出来的本地仓库恢复.因为每一次的提取操作,实际上都是一次对代码仓库的完整备份,如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/03/14/5c8a2b75051e1.png",alt:"未命名文件 (1).png"}})]),t._v(" "),a("h3",{attrs:{id:"为什么使用git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用git"}},[t._v("#")]),t._v(" 为什么使用Git？")]),t._v(" "),a("p",[t._v("Git 是分布式的.这是 Git 和其它非分布式的版本控制系统,例如 svn,cvs 等,最核心的区别.分布式带来以下好处：")]),t._v(" "),a("ol",[a("li",[t._v("更加安全,每个人的电脑上都是一个完整的版本库,独立负责自己的工作部分却又整体在推进项目的进行.只需把各自的修改推送给对方,就可以互相看到对方的修改了.")]),t._v(" "),a("li",[t._v("集中式版本控制系统,一旦中央服务器出了问题,所有人都无法工作.")]),t._v(" "),a("li",[t._v("分布式版本控制系统,每个人电脑中都有完整的版本库,所以某人的机器挂了,并不影响其它人.")])]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("h3",{attrs:{id:"windows-环境安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows-环境安装"}},[t._v("#")]),t._v(" Windows 环境安装")]),t._v(" "),a("p",[t._v("在Git 官方下载地址下载 exe 安装包.按照安装向导安装即可.")]),t._v(" "),a("p",[t._v("建议安装 Git Bash 这个 git 的命令行工具.")]),t._v(" "),a("h3",{attrs:{id:"mac-环境安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mac-环境安装"}},[t._v("#")]),t._v(" Mac 环境安装")]),t._v(" "),a("p",[t._v("在Git 官方下载地址下载 mac 安装包.按照安装向导安装即可.")]),t._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量.")]),t._v(" "),a("h3",{attrs:{id:"用户信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户信息"}},[t._v("#")]),t._v(" 用户信息")]),t._v(" "),a("p",[t._v("当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址. 这样做很重要,因为每一个 Git 的提交都会使用这些信息,并且它会写入到你的每一次提交中,不可更改：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git config --global user.name "xieyezi"\n$ git config --global user.email xieyezi@example.com\n')])])]),a("p",[t._v("在你每一次提交你代码更新信息时,会携带你的用户信息")]),t._v(" "),a("h3",{attrs:{id:"gitignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),a("p",[t._v("这个文件里配置的文件或目录,会自动被 git 所忽略,不纳入版本控制.项目在进行开发时,经常会产生一些临时文件或者依赖文件,例如"),a("code",[t._v("npm node_modules")]),t._v("等,这些没有必要放入git服务器进行托管,就会被"),a("code",[t._v(".gitignore")]),t._v("纳入.")]),t._v(" "),a("h3",{attrs:{id:"git基本原理简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git基本原理简介"}},[t._v("#")]),t._v(" git基本原理简介")]),t._v(" "),a("h4",{attrs:{id:"版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本库"}},[t._v("#")]),t._v(" 版本库")]),t._v(" "),a("p",[t._v("当你一个项目到本地或创建一个 git 项目,项目目录下会有一个隐藏的 .git 子目录.这个目录是 git 用来跟踪管理版本库的,千万不要手动修改.")]),t._v(" "),a("h4",{attrs:{id:"文件状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件状态"}},[t._v("#")]),t._v(" 文件状态")]),t._v(" "),a("p",[t._v("在 git 中,你的文件可能会处于三种状态之一：")]),t._v(" "),a("ul",[a("li",[t._v("已修改（modified） - 已修改表示修改了文件,但还没保存到数据库中.")]),t._v(" "),a("li",[t._v("已暂存（staged） - 已暂存表示对一个已修改文件的当前版本做了标记,使之包含在下次提交的快照中.")]),t._v(" "),a("li",[t._v("已提交（committed） - 已提交表示数据已经安全的保存在本地数据库中.")])]),t._v(" "),a("h4",{attrs:{id:"工作区域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作区域"}},[t._v("#")]),t._v(" 工作区域")]),t._v(" "),a("p",[t._v("与文件状态对应的,不同状态的文件在 Git 中处于不同的工作区域.")]),t._v(" "),a("ul",[a("li",[t._v("工作区（working） - 当你 git clone 一个项目到本地,相当于在本地克隆了项目的一个副本.工作区是对项目的某个版本独立提取出来的内容. 这些从 Git 仓库的压缩数据库中提取出来的文件,放在磁盘上供你使用或修改.")]),t._v(" "),a("li",[t._v("暂存区（staging） - 暂存区是一个文件,保存了下次将提交的文件列表信息,一般在 Git 仓库目录中. 有时候也被称作‘索引’,不过一般说法还是叫暂存区.")]),t._v(" "),a("li",[t._v("本地仓库（local） - 提交更新,找到暂存区域的文件,将快照永久性存储到 Git 本地仓库.")]),t._v(" "),a("li",[t._v("远程仓库（remote） - 以上几个工作区都是在本地.为了让别人可以看到你的修改,你需要将你的更新推送到远程仓库.同理,如果你想同步别人的修改,你需要从远程仓库拉取更新.")])]),t._v(" "),a("h2",{attrs:{id:"git-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[t._v("#")]),t._v(" Git 常用命令")]),t._v(" "),a("ol",[a("li",[t._v('配置自己的用户名和邮箱：\ngit config --global user.name "username"\ngit config --global user.email "username@xiaoheiban.com"')])]),t._v(" "),a("p",[t._v('// 如果某个项目你需要单独配置 user.name, 可以进入到相应的目录\ngit config --local user.name "username"\ngit config --local user.email "username@xiaoheiban.com"')]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("删除某项配置\ngit config --unset alias.co")])]),t._v(" "),a("li",[a("p",[t._v("分支查看：\n查看本地分支：（gb）git br\n查看全部分支: （gba）git br -av")])]),t._v(" "),a("li",[a("p",[t._v("创建分支两种方式，如从 master 上创建 develop 分支\n// 创建新的分支，但是不会立即切到新的分支上面\ngb develop master\n// 创建新的分支，并且立即切到新的分支上面\ngcp develop master")])]),t._v(" "),a("li",[a("p",[t._v("切换分支\n// master\ngcm\n// develop\ngcd\n// feature/xx\ngco feature/xx")])]),t._v(" "),a("li",[a("p",[t._v("合并分支\n将 develop 合并到 master：\n// merge\n// rebase\ngrbm (git rebase master 基于 master 做 rebase)\n// 解决完冲突后 ga . ,不要做 commit\ngrbc (git rebase --continue)\n// 如果不需要当前的 log\ngrbs （git rebase --skip）\n// 如果需要终止当前 rebase\ngrba （git rebase --abort）")])])]),t._v(" "),a("p",[t._v("7.标记")]),t._v(" "),a("p",[t._v("a. 打标记：git tag v0.1.0\nb. 查看标记：git tag -l\nc. 删除标记：git tag -d v0.1.0\nd. 删除远程 tag：git push origin :refs/tags/v0.9.3\ne. 推送 tag：git push --tags")]),t._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[a("p",[t._v("误删除的文件一次性恢复，两种方式，首先切到 bash 命令模式下或 linux 下直接用：\ngit ls-fies -d | xargs git co --\ngit ls-files -d | xargs -i git co {}")])]),t._v(" "),a("li",[a("p",[t._v("删除分支")])])]),t._v(" "),a("p",[t._v("删除本地分支：gbd feature_test\n删除远程分支：gp origin :feature_test\n清除远程在本地存在，而远程已经删除的分支：git remote prune origin")]),t._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[t._v("恢复文件")])]),t._v(" "),a("p",[t._v("gco -- file\n命令中的“--”很重要，没有“--”，就变成了“创建一个新分支”的命令")]),t._v(" "),a("ol",{attrs:{start:"11"}},[a("li",[t._v("查看提交 log")])]),t._v(" "),a("p",[t._v("glg|glog filename\n可以看到 fileName 相关的 commit 记录")]),t._v(" "),a("p",[t._v("glgp\n可以显示每次提交的 diff")]),t._v(" "),a("p",[t._v("只看某次提交中的某个文件变化，可以直接加上 fileName")]),t._v(" "),a("p",[t._v("git show c5e69804bbd9725b5dece57f8cbece4a96b9f80b filename")]),t._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[a("p",[t._v("git stash 命令\ngit stash\ngit stash pop\ngit stash list\ngit stash clear\ngit stash apply\ngit stash apply stash@{1}")])]),t._v(" "),a("li",[a("p",[t._v("提交远程分支")])])]),t._v(" "),a("p",[t._v("首次提交分支，需要加-u 与远程分支关联： git push -u origin develop /(gsup)\n关联过只用：git push /(gp)")]),t._v(" "),a("p",[t._v("14.拉分支")]),t._v(" "),a("p",[t._v("更新当前分支：git pull\n在 master 上分支上更新 devlop 分支：git pull origin develop:develop\n删除远程已被删除的分支： git remote prune origin")]),t._v(" "),a("ol",{attrs:{start:"15"}},[a("li",[a("p",[t._v("查看远程地址\ngit remote -v\ngit remote show origin\n// 修改远程关联分支\ngit remote set-url origin newurl")])]),t._v(" "),a("li",[a("p",[t._v("清除修改")])])]),t._v(" "),a("p",[t._v("清除本地未提交的修改：（grhh）git reset --hard\n清除本地已提交但是未推送的修改：git reset --hard origin/master")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://sourabhbajaj.com/mac-setup/",target:"_blank",rel:"noopener noreferrer"}},[t._v("大神的基本配置"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"git流程步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git流程步骤"}},[t._v("#")]),t._v(" git流程步骤")]),t._v(" "),a("h1",{attrs:{id:"git-流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-流程"}},[t._v("#")]),t._v(" Git 流程")]),t._v(" "),a("p",[t._v("一、要开发一个新的功能的时候，从 master 切一个分支出来")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("拉取最新代码\ngit pull --rebase (gup)")])]),t._v(" "),a("li",[a("p",[t._v("起一个新的分支\n功能分支:\ngit checkout -b feature/xxxx\n修复分支:\ngit checkout -b hotfix/xxxx\n开发完毕提 mr，如果 mr 没有冲突，则到此为止，直接通知相应人员就好了，如果产生了冲突，请按照下面步骤操作")])])]),t._v(" "),a("p",[t._v("二、功能开发完毕，需要合并到 master。这时候要先 rebase 下最新的 master 分支，再合并")]),t._v(" "),a("ol",[a("li",[t._v("切换 master 分支\ngit checkout master (gcm)")]),t._v(" "),a("li",[t._v("拉取最新代码\ngit pull --rebase (gup)")]),t._v(" "),a("li",[t._v("切换到自己的分支\ngit checkout feature/xxx (gco feature/xxx)\n以上步骤完成之后，请按照下面步骤操作")]),t._v(" "),a("li",[t._v("基于 master 做 rebase\ngit rebase master (grbm)")]),t._v(" "),a("li",[t._v("这个时候会产生冲突，产生冲突时，手动解决冲突\ngit add .")]),t._v(" "),a("li",[t._v("进入下一个冲突\ngit rebase --continue (grbc)")]),t._v(" "),a("li",[t._v("如果都解决完了\ngit push --force-with-lease (gpf)")]),t._v(" "),a("li",[t._v("大功告成，让 mr 负责人直接合并代码吧\nrebase 的一些其他命令\n如果不需要当前的 log\ngrbs （git rebase --skip）\n如果需要终止当前 rebase\ngrba （git rebase --abort）")])]),t._v(" "),a("h2",{attrs:{id:"git-代码提交规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-代码提交规范"}},[t._v("#")]),t._v(" git 代码提交规范")]),t._v(" "),a("p",[t._v("平时自己写代码的时候，每当需要提交代码到 GitHub 的时候，我一般的操作是直接"),a("code",[t._v("git commit 'xxxx'")]),t._v("，然后直接就推送了，后来项目变得稍微有点大了，还有一些其他小伙伴加入了项目的开发，他们给我项目仓库提交代码，长时间之后去看他们的提交，甚至都不知道他们干了啥，这就很尴尬了。所以 git 的提交必须要规范才行，尤其是在多人协作的项目中，如果 Git 的提交说明精准，在后期协作以及后期 review 会变得有据可查，项目的开发可以根据规范的提交说明快速生成开发日志，从而方便开发者或用户追踪项目的开发信息和功能特性。 ")]),t._v(" "),a("h2",{attrs:{id:"commit-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-message"}},[t._v("#")]),t._v(" commit message")]),t._v(" "),a("p",[t._v("我们每一次提交必定是有特殊的行为，或是开发新功能、或是修复 bug 等等。我们针对不同的操作有如下的分类：")]),t._v(" "),a("ul",[a("li",[t._v("type: commit 的类型")]),t._v(" "),a("li",[t._v("feat: 开发新的功能")]),t._v(" "),a("li",[t._v("fix: 修复 bug")]),t._v(" "),a("li",[t._v("refactor: 代码重构")]),t._v(" "),a("li",[t._v("docs: 文档修改")]),t._v(" "),a("li",[t._v("style: 代码格式修改, 注意不是 css 修改")]),t._v(" "),a("li",[t._v("test: 测试用例修改")]),t._v(" "),a("li",[t._v("perf: 改善性能")]),t._v(" "),a("li",[t._v("build: 变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）")]),t._v(" "),a("li",[t._v("chore: 其他修改, 比如构建流程, 依赖管理.")]),t._v(" "),a("li",[t._v("revert: 代码回退")])]),t._v(" "),a("p",[t._v("而 commit 的格式也有标准格式:")]),t._v(" "),a("ul",[a("li",[t._v("scope: commit 影响的范围, 比如: route, component, utils, build...")]),t._v(" "),a("li",[t._v("subject: commit 的概述")]),t._v(" "),a("li",[t._v("body: commit 具体修改内容")]),t._v(" "),a("li",[t._v("footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.")])]),t._v(" "),a("h2",{attrs:{id:"继续优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继续优化"}},[t._v("#")]),t._v(" 继续优化")]),t._v(" "),a("p",[t._v("假设现在有两个程序猿，程序猿甲某一天开发了一个新的功能，然后愉快利用如上的步骤提交了，过了几天，程序猿乙在他的基础上修改了代码，然后又进行了提交，又过了几天，程序猿乙因为跟产品经理吵了一架，愤然离去。接着这个功能模块只能由程序猿甲来进行迭代维护。于是在一个美丽的周一早晨，程序猿甲打开 vscode，拉取了项目代码，本想愉快的进行开发，但是他发现他原来的代码，被改得面目全非:“我这里原来没有分号啊...”、“这里原来都是双引号啊...”。他陷入了对人生的思考。通过上面的简短故事，我们了解到在进行团队协作开发的时候，由于每个人的代码都不相同，一千个哈姆雷特就出来了，代码变得越来越难以维护。所以我们需要一些“规则”来约束团队成员，达到一致的风格。\n下面就是一套“降龙十八掌”:")]),t._v(" "),a("h2",{attrs:{id:"eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[t._v("#")]),t._v(" eslint")]),t._v(" "),a("p",[t._v("第一式: "),a("code",[t._v("eslint")]),t._v(" : "),a("code",[t._v("npm install -D eslint")]),a("br"),t._v(" "),a("code",[t._v("eslint")]),t._v(" : 提供编码规范，提供自动检验代码的程序，并打印检验结果：告诉你哪一个文件哪一行代码不符合哪一条编码规范，方便你去修改代码，可以通过配置文件来加以配置。比如:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//.eslintrc.js")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"airbnb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:prettier/recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eslint扩展规则")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"parserOptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecmaVersion"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sourceType"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecmaFeatures"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsx"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"parser"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"babel-eslint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解决ES6 improt会报错")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"env"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eg如果不配置browser，window就会被eslint报undefined的错")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"es6"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"browser"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugins"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsx-a11y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"import"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"class-methods-use-this"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"import/no-named-as-default"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react/jsx-filename-extension"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extensions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".jsx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在 eslint 里面，你可以约束文件的行数、单行代码的长度，甚至是函数的复杂度等等。")]),t._v(" "),a("h2",{attrs:{id:"prettier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prettier"}},[t._v("#")]),t._v(" prettier")]),t._v(" "),a("p",[t._v("第二式:"),a("code",[t._v("prettier")]),t._v(" : "),a("code",[t._v("npm install -D prettier")]),a("br"),t._v(" "),a("code",[t._v("prettier")]),t._v(" : 代码格式化。\n利用"),a("code",[t._v("prettier")]),t._v("可以进行统一的代码格式化。从此再也没有要不要分号的纷争了。例如:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//.prettierrc")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"printWidth"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一行最大多少字符")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tabWidth"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tab占用的字符数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"useTabs"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否使用tab代替空格")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"semi"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否每句后都加分号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"singleQuote"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否使用单引号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsxSingleQuote"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// jsx是否使用单引号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"trailingComma"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"all"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组尾逗号。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bracketSpacing"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {foo: xx}还是{ foo: xx }")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arrowParens"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//箭头头函数参数是否使用（）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("那有了如上两个掌法，我们已经可以很好的实现代码格式统一，但是又衍生了一个新的问题:"),a("br"),t._v("\n开发的时候，什么时候进行代码的规则校验和格式化统一呢？相信很多小伙伴想到了解决方法:在进行"),a("code",[t._v("commit")]),t._v("的时候进行校验和格式化。")]),t._v(" "),a("p",[t._v("此时就用到了第三式:"),a("code",[t._v("husky")]),a("br"),t._v(" "),a("code",[t._v("husky")]),t._v(" : "),a("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[t._v("husky"),a("OutboundLink")],1),t._v("是一个 npm 包，安装后，可以很方便的在 package.json 配置 git hook 脚本。\n我们在这里要用到一个主要的钩子:"),a("code",[t._v("pre-commit")]),t._v(",这个钩子会在你"),a("code",[t._v("commit")]),t._v("的时候执行你想要的操作。例如:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以上代码，当你在后续的每一次"),a("code",[t._v("git commit")]),t._v(" 之前，都会执行一次对应的 hook 脚本 npm run lint 。\n所以这个时候，我们把"),a("code",[t._v("eslint")]),t._v("和"),a("code",[t._v("prettier")]),t._v("的操作都放在"),a("code",[t._v("pre-commit")]),t._v("钩子里面就可以了:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.{json,css,md}"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run format"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.scss"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint:scss"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run format"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.{js,vue,ts,tsx}"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run format"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如上，在每一次提交之前，我们都进行了 "),a("code",[t._v("eslint")]),t._v(" 的代码规则校验和 "),a("code",[t._v("prettier")]),t._v(" 的代码格式化。\n但是现在有一个问题还没解决，待我细细道来。现在我们再到我们项目的根目录下，我们再次利用"),a("code",[t._v("git add .")]),t._v(" 和 "),a("code",[t._v("git commit -m xxx")]),t._v(" 来提交，结果发现提交仍然通过了，那我们现在既可以用"),a("code",[t._v("npm run commit")]),t._v("来提交，也可以用原来的命令来提交，那我们原来搞的这一套不就是白费了吗？我的意思是我们应该对"),a("code",[t._v("commit")]),t._v("进行校验，如果校验不能通过，那我们就不允许他"),a("code",[t._v("commit")]),t._v("。那我们继续往下操作吧。")]),t._v(" "),a("h2",{attrs:{id:"commitlint-和-commitlint-config-cz"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commitlint-和-commitlint-config-cz"}},[t._v("#")]),t._v(" commitlint 和 commitlint-config-cz")]),t._v(" "),a("p",[t._v("安装"),a("code",[t._v("commitlint")]),t._v("和"),a("code",[t._v("commitlint-config-cz")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  npm install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" @commitlint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cli\n  npm install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" commitlint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cz\n")])])]),a("p",[t._v("在项目的根目录下新建 "),a("code",[t._v("commitlint.config.js")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type-empty"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不允许提交的类型为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"subject-empty"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不允许提交的内容为空")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commit-msg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在husky的配置里面加入这一句，意思为了在提交前进行校验")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后你再去用原来的"),a("code",[t._v("git comiit -m xxx")]),t._v("就会发现提交不通过了，我们达到了校验的目的。至此我们就完成前端提交代码的规范啦～")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("我们先来看看提交的流程图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/8/16ee4a036735c758?w=1086&h=594&f=png&s=25699",alt:"未命名文件.png"}})]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("commitizen")]),t._v("、"),a("code",[t._v("cz-customizable")]),t._v("、"),a("code",[t._v("eslint")]),t._v("、"),a("code",[t._v("prettier")]),t._v("、"),a("code",[t._v("husky")]),t._v("、"),a("code",[t._v("commitlint")]),t._v("我们完整的约束了提交的流程，保证了代码的统一，提高了代码的健壮性和可维护性。为后期的工作节省了很多时间，又可以省出很多时间去勾搭小姐姐了 😏")]),t._v(" "),a("h2",{attrs:{id:"gitflow流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitflow流程"}},[t._v("#")]),t._v(" Gitflow流程")]),t._v(" "),a("p",[t._v("Gitflow是一个基于feature分支管理的版本发布方案。它是由荷兰程序猿Vincent Driessen设计研发，开源项目地址gitflow-avh。\n大致流程是：")]),t._v(" "),a("ul",[a("li",[t._v("不同feature在不同feature分支上单独开发(或测试)。")]),t._v(" "),a("li",[t._v("确定版本号和此版本将要发布的功能后，将相应featustre分支统一向develop分支合并，然后拉出新的release预发布分支。")]),t._v(" "),a("li",[t._v("release分支作为持续集成关注的分支，修复bug。")]),t._v(" "),a("li",[t._v("待release分支测试验收通过后，统一向master分支和develop分支合并，并在master分支打tag。")]),t._v(" "),a("li",[t._v("根据tag发布apk版本。")])]),t._v(" "),a("p",[t._v("若线上发现严重bug，需走hotfix流程。")]),t._v(" "),a("ul",[a("li",[t._v("基于master分支拉出hotfix分支修复线上问题。")]),t._v(" "),a("li",[t._v("bug修复完成统一向master和develop分支合并。")]),t._v(" "),a("li",[t._v("master分支打上新的tag，发布新版本。")])]),t._v(" "),a("p",[t._v("下面将介绍如何使用Gitflow命令完成上述版本发布，一条Gitflow指令可能对应了一系列git命令，为的是规范化开发流程，提高代码管理效率。")]),t._v(" "),a("h3",{attrs:{id:"mac平台安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mac平台安装"}},[t._v("#")]),t._v(" Mac平台安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("brew install git-flow\n")])])]),a("p",[t._v("brew表示Homebrew，它是mac平台常用的包管理器，没有安装则需先安装，安装可参考Mac OS下brew的安装和使用。")]),t._v(" "),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),a("p",[t._v("先将远程仓库克隆到本地。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone <project_url>\n")])])]),a("p",[t._v("各种初始化Gitflow配置。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow init\n")])])]),a("p",[t._v("命令行会提示你是否修改Gitflow提供的默认分支前缀。不同场景的分支前缀不同，默认情况下分支前缀是这样的：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("场景")]),t._v(" "),a("th",[t._v("分支前缀")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("新功能")]),t._v(" "),a("td",[t._v("feature")])]),t._v(" "),a("tr",[a("td",[t._v("预发布")]),t._v(" "),a("td",[t._v("release")])]),t._v(" "),a("tr",[a("td",[t._v("热修复")]),t._v(" "),a("td",[t._v("hotfix")])]),t._v(" "),a("tr",[a("td",[t._v("打tag")]),t._v(" "),a("td",[t._v("空")])])])]),t._v(" "),a("p",[t._v("分支前缀的作用是区分不同分支的使用场景，同时当你使用Gitflow命令时就不需手动添加分支前缀了，Gitflow会帮你加上。\n比如开发新功能需创建一个feature分支，名为gitworkflow，使用下面的代码将会创建一个名为feature/gitworkflow本地分支。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow feature start gitworkflow\n")])])]),a("p",[t._v("通常情况下不需要修改默认的命名前缀，只需加上-d就可跳过修改命名阶段。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow init -d\n")])])]),a("h3",{attrs:{id:"行为-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行为-action"}},[t._v("#")]),t._v(" 行为/Action")]),t._v(" "),a("p",[t._v("通常来说，一种场景的完整生命周期应至少包含以下几种行为：")]),t._v(" "),a("ul",[a("li",[t._v("start 开始开发")]),t._v(" "),a("li",[t._v("publish 发布到远程分支")]),t._v(" "),a("li",[t._v("finish 完成开发、合并到主分支")])]),t._v(" "),a("p",[t._v("我们首先以feature场景为例，看看如何完成工作流。")]),t._v(" "),a("h3",{attrs:{id:"feature流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature流程"}},[t._v("#")]),t._v(" feature流程")]),t._v(" "),a("h4",{attrs:{id:"start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[t._v("#")]),t._v(" start")]),t._v(" "),a("p",[t._v("新功能开始开发前，需准备好开发分支。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow feature start <feature_name>\n")])])]),a("p",[t._v("执行上面的命令将会在本地创建名为<feature_name>的分支，并切换到该分支，而且不论当前所处哪个分支都是基于develop分支创建，相当于执行了下面的git的命令。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout -b feature/<feature_name> develop\n")])])]),a("p",[t._v("需要注意基于的是本地的develop分支，执行此命令前一般需要拉取最新的远程代码。")]),t._v(" "),a("h4",{attrs:{id:"publish"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#publish"}},[t._v("#")]),t._v(" publish")]),t._v(" "),a("p",[t._v("在本地开发完成新功能并commit后，需要将本地代码push到远程仓库。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow feature publish <feature_name>\n")])])]),a("p",[t._v("这行指令做了三件事。")]),t._v(" "),a("ul",[a("li",[t._v("创建一个名为feature/<feature_name>的远程分支。")]),t._v(" "),a("li",[t._v("本地分支track上述远程分支。")]),t._v(" "),a("li",[t._v("如果本地有未push代码，则执行push。")])]),t._v(" "),a("p",[t._v("转换成git命令就是下面的样子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin feature/<feature_name>\ngit push --set-upstream origin feature/<feature_name>\ngit push origin\n")])])]),a("p",[t._v("注意：如果已经执行过publish后又有新的代码需push，再次执行将报错，因为它始终会试图创建一个远程分支。此时需执行正常的push命令git push origin。")]),t._v(" "),a("h4",{attrs:{id:"finish"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finish"}},[t._v("#")]),t._v(" finish")]),t._v(" "),a("p",[t._v("当功能开发完毕后就将进入测试阶段，此时需将一个或多个feature分支统一合并到develop分支。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow feature finish <feature_name>\n")])])]),a("p",[t._v("这行指令也做了三件事。")]),t._v(" "),a("ul",[a("li",[t._v("切换到develop分支。")]),t._v(" "),a("li",[t._v("合并代码到develop分支")]),t._v(" "),a("li",[t._v("删除本地feature/<feature_name>分支。\n等价于执行下面的git命令：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout develop\ngit merge feature/<feature_name>\ngit branch -d feature/<feature_name>\n")])])]),a("p",[t._v("如果merge时发生了冲突，则在第二步merge时终止流程，即不会再删除本地分支。但当前已处于develop分支，待本地冲突解决并commit后，重新执行"),a("code",[t._v("git flow feature finish <feature_name>")]),t._v("即可完成finish流程。\n细心的同学可以已经发现finish还有两件事没做。")]),t._v(" "),a("ul",[a("li",[t._v("develop分支代码还未push。")]),t._v(" "),a("li",[t._v("未删除远程分支feature/<feature_name>。")])]),t._v(" "),a("p",[t._v("也就是还需执行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin develop\ngit push origin :feature/<feature_name>\n")])])]),a("h3",{attrs:{id:"release流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#release流程"}},[t._v("#")]),t._v(" release流程")]),t._v(" "),a("p",[t._v("当新功能开发完毕，将进入测试阶段，此时需要基于develop分支拉出release分支进行集成测试，也有将release场景作为预发布环境进行测试的，即feature场景已完成常规测试，在这种情况下，一般而言release只有少数改动。在这里我们先不讨论项目流程问题。\n使用start指令开启一个release场景，通常以版本号命令，我们以v2.0为例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow release start v2.0\n")])])]),a("p",[t._v("此命令会基于本地的develop分支创建一个release/v2.0分支，并切换到这个分支上。\n为了让其他协同人员也能看到此分支，需要将其发布出去。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow release publish v2.0\n")])])]),a("p",[t._v("以上和feature场景十分类似。\n待测试通过需要发布正式版：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow release finish v2.0\n")])])]),a("p",[t._v("这一步做的动作有点多，大致是：")]),t._v(" "),a("ul",[a("li",[t._v("git fetch")]),t._v(" "),a("li",[t._v("release/v2.0分支代码向master合并。")]),t._v(" "),a("li",[t._v("生成名为v2.0的tag。")]),t._v(" "),a("li",[t._v("release/v2.0分支代码向develop合并。")]),t._v(" "),a("li",[t._v("删除本地release/v2.0分支。")]),t._v(" "),a("li",[t._v("切换回develop分支。")])]),t._v(" "),a("p",[t._v("如果merge产生冲突不会终止流程，只是不会将本地的release分支删除，待解决完冲突后需再次执行finish指令。\n另外需要注意的是，如果本地还有未finish的release分支，将不允许使用start指令开启新的release分支，这一点是对并行发布的一个限制。\nrelease finish只是完成了本地代码的一系列操作，还需要同步到远程仓库。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin develop\ngit push origin master\ngit push origin v2.0\n")])])]),a("p",[t._v("或者使用下面的命令推送所有的分支和tag。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin --all\ngit push origin --tags\n")])])]),a("h3",{attrs:{id:"hotfix-流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hotfix-流程"}},[t._v("#")]),t._v(" hotfix 流程")]),t._v(" "),a("p",[t._v("当tag打完，也表示正式版本发布出去了，如果此时在线上发现了严重的bug，需要进行紧急修复。\n此时我们假设版本号变为v2.0-patch。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow hotfix start v2.0-patch\n")])])]),a("p",[t._v("这将创建一个hotfix/v2.0本地分支并切换到该分支。 hotfix没有publish指令，认为hotfix应该是个小范围改动，不需要其他协同人员参与。\n待本地修改结束commit后，执行finish指令。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git flow hotfix finish v2.0-patch\n")])])]),a("p",[t._v("按照Gitflow工作流，它会执行下面的任务，与release基本一致。")]),t._v(" "),a("ul",[a("li",[t._v("git fetch")]),t._v(" "),a("li",[t._v("hotfix/v2.0-patch分支代码向master合并。")]),t._v(" "),a("li",[t._v("生成名为v2.0-patch的tag。")]),t._v(" "),a("li",[t._v("hotfix/v2.0-patch分支代码向develop合并。")]),t._v(" "),a("li",[t._v("删除本地hotfix/v2.0-patch分支。")]),t._v(" "),a("li",[t._v("切换回develop分支。")])]),t._v(" "),a("h2",{attrs:{id:"删除github项目中指定的目录和文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除github项目中指定的目录和文件"}},[t._v("#")]),t._v(" 删除github项目中指定的目录和文件")]),t._v(" "),a("h3",{attrs:{id:"说在前面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说在前面"}},[t._v("#")]),t._v(" 说在前面")]),t._v(" "),a("p",[t._v("有时候我们将项目托管至github之后才发现,我们可能需要删除部分指定的目录或者文件,但是直接在"),a("code",[t._v(".gitignore")]),t._v("文件标注说明,推送到github之后,你会发现想要删除的目录仍然没有删除,所以此时我们需要使用git命令来进行删除.")]),t._v(" "),a("h3",{attrs:{id:"删除指定目录或文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除指定目录或文件"}},[t._v("#")]),t._v(" 删除指定目录或文件")]),t._v(" "),a("ol",[a("li",[t._v("先删除本地的git缓存")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm -r --cached <filename>\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("在.gitignore中加入需要忽略的文件夹或文件")])]),t._v(" "),a("li",[a("p",[t._v("重新提交")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git add -A\ngit commit -m "remove files"\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("推送到GitHub")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin master\n")])])]),a("p",[t._v("到Github查看,大功告成！")])])}),[],!1,null,null,null);s.default=r.exports}}]);