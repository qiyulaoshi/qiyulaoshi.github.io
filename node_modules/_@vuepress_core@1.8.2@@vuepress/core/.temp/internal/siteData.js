/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "xieyezi",
  "description": "Hi,我是写夜子",
  "base": "/",
  "headTags": [
    [
      "link",
      {
        "rel": "icon",
        "href": "/favicon.ico"
      }
    ],
    [
      "meta",
      {
        "name": "viewport",
        "content": "width=device-width,initial-scale=1,user-scalable=no"
      }
    ],
    [
      "link",
      {
        "rel": "stylesheet",
        "href": "https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css"
      }
    ]
  ],
  "pages": [
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "heroImage": "/logo.png",
        "heroText": "xieyezi",
        "tagline": "Hi,我是写夜子",
        "actionText": "🌈 Enter 🌈",
        "actionLink": "/front-end/",
        "preactionText": "✨ Project ✨",
        "preactionLink": "https://github.com/xieyezi",
        "readingShow": "top"
      },
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-410f1bbc",
      "path": "/",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "正在更新....",
      "frontmatter": {
        "title": "正在更新....",
        "readingShow": "top"
      },
      "regularPath": "/flutter/article/",
      "relativePath": "flutter/article/README.md",
      "key": "v-370041d8",
      "path": "/flutter/article/",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "2019nCoV疫情地图",
      "frontmatter": {
        "title": "2019nCoV疫情地图",
        "readingShow": "top"
      },
      "regularPath": "/front-end/2019nCoV%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE.html",
      "relativePath": "front-end/2019nCoV疫情地图.md",
      "key": "v-cb4855ee",
      "path": "/front-end/2019nCoV%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE.html",
      "headers": [
        {
          "level": 2,
          "title": "功能",
          "slug": "功能"
        },
        {
          "level": 2,
          "title": "预览",
          "slug": "预览"
        },
        {
          "level": 2,
          "title": "快速开始",
          "slug": "快速开始"
        },
        {
          "level": 2,
          "title": "部署",
          "slug": "部署"
        },
        {
          "level": 2,
          "title": "数据来源",
          "slug": "数据来源"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Es6的学习笔记1",
      "frontmatter": {
        "title": "Es6的学习笔记1",
        "tags": [
          "vue",
          "nginx"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Es6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01.html",
      "relativePath": "front-end/Es6的学习笔记1.md",
      "key": "v-3e1c0a18",
      "path": "/front-end/Es6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01.html",
      "headers": [
        {
          "level": 3,
          "title": "学习ES6的必要性",
          "slug": "学习es6的必要性"
        }
      ],
      "excerpt": "<h3 id=\"学习es6的必要性\"><a class=\"header-anchor\" href=\"#学习es6的必要性\">#</a> 学习ES6的必要性</h3>\n<p>前端的发展越来越快,因为其强大的扩展性、跨平台性,所以Es6标准就出来了.近来我一直在学习Es6,把这些笔记都记录下来.</p>\n<h4 id=\"let命令\"><a class=\"header-anchor\" href=\"#let命令\">#</a> let命令</h4>\n<ul>\n<li>let命令用来初始化变量,但是所声明的变量只在所属代码块有效.</li>\n<li>不存在变量的提升(变量在声明之前使用，值为undefined).</li>\n</ul>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "AboutDialog",
      "frontmatter": {
        "title": "AboutDialog",
        "readingShow": "top"
      },
      "regularPath": "/flutter/widgets/",
      "relativePath": "flutter/widgets/README.md",
      "key": "v-78ef8722",
      "path": "/flutter/widgets/",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Es6的学习笔记2",
      "frontmatter": {
        "title": "Es6的学习笔记2",
        "tags": [
          "Es6",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Es6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02.html",
      "relativePath": "front-end/Es6的学习笔记2.md",
      "key": "v-580f39d8",
      "path": "/front-end/Es6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02.html",
      "headers": [
        {
          "level": 3,
          "title": "函数的扩展",
          "slug": "函数的扩展"
        }
      ],
      "excerpt": "<h3 id=\"函数的扩展\"><a class=\"header-anchor\" href=\"#函数的扩展\">#</a> 函数的扩展</h3>\n<p>ES6对函数做了很多扩展.</p>\n<h4 id=\"函数参数的默认值\"><a class=\"header-anchor\" href=\"#函数参数的默认值\">#</a> 函数参数的默认值</h4>\n<p>ES6允许为函数的参数设置默认值:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">point</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token comment\">// 0 , y:  //0}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "gulp的基本使用",
      "frontmatter": {
        "title": "gulp的基本使用",
        "tags": [
          "Vue",
          "JS",
          "Gulp"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Gulp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",
      "relativePath": "front-end/Gulp的基本使用.md",
      "key": "v-28b709dc",
      "path": "/front-end/Gulp%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",
      "headers": [
        {
          "level": 3,
          "title": "Gulp是什么?",
          "slug": "gulp是什么"
        },
        {
          "level": 3,
          "title": "如何使用Gulp？",
          "slug": "如何使用gulp"
        },
        {
          "level": 3,
          "title": "近来情况的总结",
          "slug": "近来情况的总结"
        }
      ],
      "excerpt": "<h3 id=\"gulp是什么\"><a class=\"header-anchor\" href=\"#gulp是什么\">#</a> Gulp是什么?</h3>\n<p>Gulp 是基于node.js的一个前端自动化构建工具,开发这可以使用它构建自动化工作流程（前端集成开发环境）. 使用gulp你可以简化工作量,让你把重点放在功能的开发上,从而提高你的开发效率和工作质量.说简单点，gulp和webpack一样,都是基于Node.js的前端工程化打包工具.所以在使用之前，必须安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js<OutboundLink/></a>.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "前端",
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/front-end/",
      "relativePath": "front-end/README.md",
      "key": "v-305d0e7f",
      "path": "/front-end/",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue-cli 3.0请求本地模拟数据",
      "frontmatter": {
        "title": "Vue-cli 3.0请求本地模拟数据",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%20Cli3.0%E8%AF%B7%E6%B1%82%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE.html",
      "relativePath": "front-end/Vue Cli3.0请求本地模拟数据.md",
      "key": "v-bd1edb70",
      "path": "/front-end/Vue%20Cli3.0%E8%AF%B7%E6%B1%82%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE.html",
      "headers": [
        {
          "level": 3,
          "title": "升级的前后",
          "slug": "升级的前后"
        },
        {
          "level": 3,
          "title": "请求本地模拟数据",
          "slug": "请求本地模拟数据"
        }
      ],
      "excerpt": "<h3 id=\"升级的前后\"><a class=\"header-anchor\" href=\"#升级的前后\">#</a> 升级的前后</h3>\n<p>很多时候,我们在一个项目的开发阶段,需要用到本地的模拟数据.在3.0以前的版本,在项目的根目录下有一个webpack.dev.conf.js文件可以提供给开发者进行配置,但是现在升级之后,3.0的版本目录结构比以前精简很多,没有了这个文件,那么在这个版本我们怎么请求本地的模拟数据呢？</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Tomcat配置域名访问",
      "frontmatter": {
        "title": "Tomcat配置域名访问",
        "tags": [
          "Tomcat"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Tomcat%E7%9A%84%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE.html",
      "relativePath": "front-end/Tomcat的配置域名访问.md",
      "key": "v-2d52c994",
      "path": "/front-end/Tomcat%E7%9A%84%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE.html",
      "headers": [
        {
          "level": 3,
          "title": "Tomcat基本配置",
          "slug": "tomcat基本配置"
        }
      ],
      "excerpt": "<h3 id=\"tomcat基本配置\"><a class=\"header-anchor\" href=\"#tomcat基本配置\">#</a> Tomcat基本配置</h3>\n<p>我们在构建一个网站的时候,常常选择Tomcat作为服务器的工程项目容器.所以我们需要将域名配置到Tomcat上,也就是说我们可以通过域名直接访问我们的网站.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue.$nextTick解析",
      "frontmatter": {
        "title": "Vue.$nextTick解析",
        "tags": [
          "vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue.$nextTick%E8%A7%A3%E6%9E%90.html",
      "relativePath": "front-end/Vue.$nextTick解析.md",
      "key": "v-89f23028",
      "path": "/front-end/Vue.$nextTick%E8%A7%A3%E6%9E%90.html",
      "headers": [
        {
          "level": 2,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "问题背景",
          "slug": "问题背景"
        },
        {
          "level": 3,
          "title": "问题探究",
          "slug": "问题探究"
        },
        {
          "level": 3,
          "title": "继续探究",
          "slug": "继续探究"
        },
        {
          "level": 3,
          "title": "对 audio 播放的影响",
          "slug": "对-audio-播放的影响"
        },
        {
          "level": 3,
          "title": "解决方法",
          "slug": "解决方法"
        }
      ],
      "excerpt": "<h2 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h2>\n<p>这篇博文全是干货,内容很长,但是值得收藏！！！</p>\n<h3 id=\"问题背景\"><a class=\"header-anchor\" href=\"#问题背景\">#</a> 问题背景</h3>\n<p>\b我最近在做一个自己的音乐Web App,期间遇到不少瓶颈,这次记录一下我困扰了将近一周的问题.我在一个组件内点击了播放按键,将这个点击事件派发到父组件,然后传入ID到player组件内,进行异步请求,获取到该首音乐的播放地址,然后通过vue.$ref去调用audio.play()方法,经过调试发现,在谷歌浏览器、火狐浏览器等都能正常播放,但是唯独苹果旗下的safari播放器不能播放.请看代码:</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue-cli 3.0解决跨域问题",
      "frontmatter": {
        "title": "Vue-cli 3.0解决跨域问题",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue-cli%203.0%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html",
      "relativePath": "front-end/Vue-cli 3.0解决跨域问题.md",
      "key": "v-170415c9",
      "path": "/front-end/Vue-cli%203.0%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html",
      "headers": [
        {
          "level": 3,
          "title": "为什么要跨域？",
          "slug": "为什么要跨域"
        },
        {
          "level": 3,
          "title": "Vue-cli 3.0怎么解决跨域问题？",
          "slug": "vue-cli-3-0怎么解决跨域问题"
        }
      ],
      "excerpt": "<h3 id=\"为什么要跨域\"><a class=\"header-anchor\" href=\"#为什么要跨域\">#</a> 为什么要跨域？</h3>\n<p>Vue.js真的是一个很好的前端框架.它很好地实现了前后端分离.但是在前后端分离的项目中,一般都会涉及到跨域请求的问题,那么什么是跨域？跨域指浏览器不允许当前页面所在的源去请求另一个源的数据.源指的是协议、端口、域名.只要这3个中有一个不同的就是跨域.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue使用axios的get和post请求",
      "frontmatter": {
        "title": "Vue使用axios的get和post请求",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E4%BD%BF%E7%94%A8axios%E7%9A%84get%E5%92%8Cpost%E8%AF%B7%E6%B1%82.html",
      "relativePath": "front-end/Vue使用axios的get和post请求.md",
      "key": "v-76b35d08",
      "path": "/front-end/Vue%E4%BD%BF%E7%94%A8axios%E7%9A%84get%E5%92%8Cpost%E8%AF%B7%E6%B1%82.html",
      "headers": [
        {
          "level": 3,
          "title": "安装axios",
          "slug": "安装axios"
        },
        {
          "level": 3,
          "title": "在vue项目中引入",
          "slug": "在vue项目中引入"
        },
        {
          "level": 3,
          "title": "在组件中执行get请求",
          "slug": "在组件中执行get请求"
        },
        {
          "level": 3,
          "title": "在组件中执行post请求",
          "slug": "在组件中执行post请求"
        }
      ],
      "excerpt": "<h3 id=\"安装axios\"><a class=\"header-anchor\" href=\"#安装axios\">#</a> 安装axios</h3>\n<p><a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener noreferrer\">Axios<OutboundLink/></a> 是一个基于 promise 的 HTTP 库,可以用在浏览器和 node.js 中.</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API</li>\n</ul>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue开发环境的搭建",
      "frontmatter": {
        "title": "Vue开发环境的搭建",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA.html",
      "relativePath": "front-end/Vue开发环境的搭建.md",
      "key": "v-6ad98cee",
      "path": "/front-end/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA.html",
      "headers": [
        {
          "level": 3,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 3,
          "title": "安装步骤",
          "slug": "安装步骤"
        }
      ],
      "excerpt": "<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>学了 Vue 也算是有段时间了,我看了一下自己的博客记录,居然没有一篇写如何搭建 Vue 开发环境的,于是才有了这篇博文.现在前端的开发更趋向于工程化、模块化,所以使用 Vue-Cli 是非常必要的.基本来说,要将 Vue 项目跑起来,要用到以下工具:</p>\n<ul>\n<li>Node.js</li>\n<li>npm</li>\n<li>webpack</li>\n<li>Vue-Cli</li>\n</ul>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue cli3+Hubuilder将项目打包为App",
      "frontmatter": {
        "title": "Vue cli3+Hubuilder将项目打包为App",
        "tags": [
          "Vue",
          "Hubuilder"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue-cli3.0+Hbuilder%E6%89%93%E5%8C%85App.html",
      "relativePath": "front-end/Vue-cli3.0+Hbuilder打包App.md",
      "key": "v-05cca074",
      "path": "/front-end/Vue-cli3.0+Hbuilder%E6%89%93%E5%8C%85App.html",
      "headers": [
        {
          "level": 3,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 3,
          "title": "Vue开发app如何打包？",
          "slug": "vue开发app如何打包"
        }
      ],
      "excerpt": "<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>现在跨平台的开发越发的火了起来。前端能做到的事情也越来越多，App再也不用完全依靠安卓原生开发了。现在开发app的方式都是内核是前端开发，然后再给项目套一个安卓的外壳，即可实现app的开发。</p>\n<h3 id=\"vue开发app如何打包\"><a class=\"header-anchor\" href=\"#vue开发app如何打包\">#</a> Vue开发app如何打包？</h3>\n<p>现在最新的脚手架为Vue-cli3,构建出来的项目结构十分明了简单。配置文件只需一个Vue.config.js即可搞定。</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue多个组件映射到同一个组件,页面不刷新？",
      "frontmatter": {
        "title": "Vue多个组件映射到同一个组件,页面不刷新？",
        "tags": [
          "git",
          "GitHub"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6%E6%98%A0%E5%B0%84%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6,%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%88%B7%E6%96%B0%EF%BC%9F.html",
      "relativePath": "front-end/Vue多个组件映射到同一个组件,页面不刷新？.md",
      "key": "v-2693d922",
      "path": "/front-end/Vue%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6%E6%98%A0%E5%B0%84%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6,%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%88%B7%E6%96%B0%EF%BC%9F.html",
      "headers": [
        {
          "level": 3,
          "title": "问题",
          "slug": "问题"
        },
        {
          "level": 3,
          "title": "解决方法",
          "slug": "解决方法"
        }
      ],
      "excerpt": "<h3 id=\"问题\"><a class=\"header-anchor\" href=\"#问题\">#</a> 问题</h3>\n<p>在做项目的过程中,有这么一个场景：多个组件通过配置路由,都跳转到同一个组件,他们之间的区别就是,传入的参数不同.请看<code>router</code>对象：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>  userCenterLike<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                      name<span class=\"token operator\">:</span> <span class=\"token string\">'user-center'</span><span class=\"token punctuation\">,</span>\n                      params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                          index<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  userCenterHistory<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                      name<span class=\"token operator\">:</span> <span class=\"token string\">'user-center'</span><span class=\"token punctuation\">,</span>\n                      params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                          index<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue插槽与缓存",
      "frontmatter": {
        "title": "Vue插槽与缓存",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E6%8F%92%E6%A7%BD%E4%B8%8E%E7%BC%93%E5%AD%98.html",
      "relativePath": "front-end/Vue插槽与缓存.md",
      "key": "v-4a91cffe",
      "path": "/front-end/Vue%E6%8F%92%E6%A7%BD%E4%B8%8E%E7%BC%93%E5%AD%98.html",
      "headers": [
        {
          "level": 3,
          "title": "插槽",
          "slug": "插槽"
        },
        {
          "level": 3,
          "title": "动态组件",
          "slug": "动态组件"
        },
        {
          "level": 3,
          "title": "缓存(keep alive)",
          "slug": "缓存-keep-alive"
        }
      ],
      "excerpt": "<h3 id=\"插槽\"><a class=\"header-anchor\" href=\"#插槽\">#</a> 插槽</h3>\n<p>利用插槽,父组件可以向子组件里面注入内容.\n注：插槽的视图部分的样式由父组件决定,子组件决定数据.也就是说是子组件给父组件传递数据.\n插槽的类型有：</p>\n<ul>\n<li>单个插槽的使用\n父组件：</li>\n</ul>\n<!--beforebegin--><div class=\"language-HTML extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我是插槽<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Child</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue过渡与动画",
      "frontmatter": {
        "title": "Vue过渡与动画",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB.html",
      "relativePath": "front-end/Vue过渡与动画.md",
      "key": "v-69866106",
      "path": "/front-end/Vue%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB.html",
      "headers": [
        {
          "level": 3,
          "title": "过渡",
          "slug": "过渡"
        },
        {
          "level": 3,
          "title": "单元素/组件的过渡",
          "slug": "单元素-组件的过渡"
        },
        {
          "level": 3,
          "title": "过渡的类名",
          "slug": "过渡的类名"
        },
        {
          "level": 3,
          "title": "css动画",
          "slug": "css动画"
        },
        {
          "level": 3,
          "title": "引入第三方css动画库",
          "slug": "引入第三方css动画库"
        }
      ],
      "excerpt": "<h3 id=\"过渡\"><a class=\"header-anchor\" href=\"#过渡\">#</a> 过渡</h3>\n<p>Vue 在插入、更新或者移除 DOM 时,提供多种不同方式的应用过渡效果.\n包括以下工具：</p>\n<ul>\n<li>在 CSS 过渡和动画中自动应用 class</li>\n<li>可以配合使用第三方 CSS 动画库，如 Animate.css</li>\n</ul>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "VueX的相关使用",
      "frontmatter": {
        "title": "VueX的相关使用",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/VueX%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8.html",
      "relativePath": "front-end/VueX的相关使用.md",
      "key": "v-e4837eb2",
      "path": "/front-end/VueX%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8.html",
      "headers": [
        {
          "level": 3,
          "title": "VueX是什么?",
          "slug": "vuex是什么"
        },
        {
          "level": 3,
          "title": "为什么要用VueX？",
          "slug": "为什么要用vuex"
        },
        {
          "level": 3,
          "title": "VueX的核心",
          "slug": "vuex的核心"
        },
        {
          "level": 3,
          "title": "核心概念和使用",
          "slug": "核心概念和使用"
        }
      ],
      "excerpt": "<h3 id=\"vuex是什么\"><a class=\"header-anchor\" href=\"#vuex是什么\">#</a> VueX是什么?</h3>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式.它采用集中式存储管理应用的所有组件的状态,并以相应的规则保证状态以一种可预测的方式发生变化.Vuex 也集成到 Vue 的官方调试工具 devtools extension,提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue组件",
      "frontmatter": {
        "title": "Vue组件",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E7%BB%84%E4%BB%B6.html",
      "relativePath": "front-end/Vue组件.md",
      "key": "v-19907c69",
      "path": "/front-end/Vue%E7%BB%84%E4%BB%B6.html",
      "headers": [
        {
          "level": 3,
          "title": "Vue组件",
          "slug": "vue组件"
        },
        {
          "level": 3,
          "title": "子父级组件",
          "slug": "子父级组件"
        },
        {
          "level": 3,
          "title": "props数据传递检测",
          "slug": "props数据传递检测"
        }
      ],
      "excerpt": "<h3 id=\"vue组件\"><a class=\"header-anchor\" href=\"#vue组件\">#</a> Vue组件</h3>\n<p>组件是Vue.js最核心的功能之一,组件可以扩展HTML元素,封装可重用的代码.\n所以的组件都是Vue的一个实例.\n一个单组件分为三部分：</p>\n<ul>\n<li>template(HTML部分)</li>\n<li>script(逻辑部分)</li>\n<li>style(样式部分)</li>\n</ul>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Windows搭建最完美的VScode开发平台",
      "frontmatter": {
        "title": "Windows搭建最完美的VScode开发平台",
        "tags": [
          "Windows",
          "VScode"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/WIndows%E6%90%AD%E5%BB%BA%E6%9C%80%E5%AE%8C%E7%BE%8E%E7%9A%84VS%20code%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0.html",
      "relativePath": "front-end/WIndows搭建最完美的VS code开发平台.md",
      "key": "v-610e62b2",
      "path": "/front-end/WIndows%E6%90%AD%E5%BB%BA%E6%9C%80%E5%AE%8C%E7%BE%8E%E7%9A%84VS%20code%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0.html",
      "headers": [
        {
          "level": 2,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "主题",
          "slug": "主题"
        },
        {
          "level": 3,
          "title": "图标",
          "slug": "图标"
        },
        {
          "level": 3,
          "title": "字体",
          "slug": "字体"
        }
      ],
      "excerpt": "<h2 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h2>\n<p>公司的电脑是Windows电脑,且显示器的分辨率只有1080P,在使用vscode写代码的过程中,眼睛简直要瞎了,跟Mac对比起来,太过于模糊.于是开始了一番折腾,包括字体、文件图标、主题等等一系列的设置.</p>\n<h3 id=\"主题\"><a class=\"header-anchor\" href=\"#主题\">#</a> 主题</h3>\n<p>主题我经过千挑万选,最终选定了One Dark Pro Vivid,安装请直接在vscode扩展里面搜索即可.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "better-scroll插件初始化后没有效果?",
      "frontmatter": {
        "title": "better-scroll插件初始化后没有效果?",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/better-scroll%E6%8F%92%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E6%B2%A1%E6%9C%89%E6%95%88%E6%9E%9C.html",
      "relativePath": "front-end/better-scroll插件初始化后没有效果.md",
      "key": "v-a8aafe26",
      "path": "/front-end/better-scroll%E6%8F%92%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E6%B2%A1%E6%9C%89%E6%95%88%E6%9E%9C.html",
      "headers": [
        {
          "level": 3,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "安装及其引入",
          "slug": "安装及其引入"
        },
        {
          "level": 3,
          "title": "插件的理解",
          "slug": "插件的理解"
        },
        {
          "level": 3,
          "title": "插件的初始化",
          "slug": "插件的初始化"
        }
      ],
      "excerpt": "<h1 id=\"better-scroll-插件初始化后没有效果\"><a class=\"header-anchor\" href=\"#better-scroll-插件初始化后没有效果\">#</a> better-scroll 插件初始化后没有效果?</h1>\n<h3 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h3>\n<p>最近做开发,用到了一个很著名的 Vue 插件-<a href=\"https://ustbhuangyi.github.io/better-scroll/#/\" target=\"_blank\" rel=\"noopener noreferrer\">better-scroll<OutboundLink/></a>.这个插件主要是用来解移动端各种滚动页面的需求.我在项目中想要一个页面的滚动效果,引入了这个插件之后,按照作者的方法进行了初始化,但是仍然无法实现.经过我不断的谷歌,终于找到了解决的办法.下面我来介绍一下这个插件的具体的用法.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "路由的基本加载",
      "frontmatter": {
        "title": "路由的基本加载",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E8%B7%AF%E7%94%B1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%A0%E8%BD%BD.html",
      "relativePath": "front-end/Vue路由的基本加载.md",
      "key": "v-4f1384d2",
      "path": "/front-end/Vue%E8%B7%AF%E7%94%B1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%A0%E8%BD%BD.html",
      "headers": [
        {
          "level": 3,
          "title": "Vue Router",
          "slug": "vue-router"
        },
        {
          "level": 3,
          "title": "使用方法",
          "slug": "使用方法"
        }
      ],
      "excerpt": "<h3 id=\"vue-router\"><a class=\"header-anchor\" href=\"#vue-router\">#</a> Vue Router</h3>\n<p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>\n<ul>\n<li>嵌套的路由/视图表</li>\n<li>模块化的、基于组件的路由配置</li>\n<li>路由参数、查询、通配符</li>\n<li>基于 Vue.js 过渡系统的视图过渡效果</li>\n</ul>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "css超出部分显示省略号",
      "frontmatter": {
        "title": "css超出部分显示省略号",
        "tags": [
          "CSS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/css%E8%B6%85%E5%87%BA%E9%83%A8%E5%88%86%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html",
      "relativePath": "front-end/css超出部分显示省略号.md",
      "key": "v-de036e5c",
      "path": "/front-end/css%E8%B6%85%E5%87%BA%E9%83%A8%E5%88%86%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7.html",
      "headers": [
        {
          "level": 3,
          "title": "超出部分显示为省略号",
          "slug": "超出部分显示为省略号"
        },
        {
          "level": 3,
          "title": "块级元素与行内元素",
          "slug": "块级元素与行内元素"
        }
      ],
      "excerpt": "<h3 id=\"超出部分显示为省略号\"><a class=\"header-anchor\" href=\"#超出部分显示为省略号\">#</a> 超出部分显示为省略号</h3>\n<p>我们经常遇见要展示一行或者多行内容，超出部分会让我们的页面变得很难看，所以我们需要设置一下超出部分显示省略号。</p>\n<ul>\n<li>内容为一行</li>\n</ul>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>//把超出的内容进行隐藏\n<span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span>ellipsis<span class=\"token punctuation\">;</span>设置超出内容为省略号\n<span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>//设置内容不换行\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "call和apply的区别及其用法",
      "frontmatter": {
        "title": "call和apply的区别及其用法",
        "readingShow": "top"
      },
      "regularPath": "/front-end/call%E5%92%8Capply%E7%9A%84%E5%8C%BA%E5%88%AB.html",
      "relativePath": "front-end/call和apply的区别.md",
      "key": "v-6b67dcce",
      "path": "/front-end/call%E5%92%8Capply%E7%9A%84%E5%8C%BA%E5%88%AB.html",
      "headers": [
        {
          "level": 2,
          "title": "apply",
          "slug": "apply"
        },
        {
          "level": 2,
          "title": "call",
          "slug": "call"
        },
        {
          "level": 2,
          "title": "用途",
          "slug": "用途"
        },
        {
          "level": 3,
          "title": "改变 this 的指向",
          "slug": "改变-this-的指向"
        },
        {
          "level": 3,
          "title": "借用别的对象的方法",
          "slug": "借用别的对象的方法"
        },
        {
          "level": 3,
          "title": "调用函数",
          "slug": "调用函数"
        },
        {
          "level": 2,
          "title": "call、apply 和 bind 的区别",
          "slug": "call、apply-和-bind-的区别"
        },
        {
          "level": 3,
          "title": "bind 的返回值是一个函数",
          "slug": "bind-的返回值是一个函数"
        },
        {
          "level": 3,
          "title": "参数的使用",
          "slug": "参数的使用"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue组件库iView的使用",
      "frontmatter": {
        "title": "Vue组件库iView的使用",
        "tags": [
          "CSS",
          "HTML",
          "Vue"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue%E7%BB%84%E4%BB%B6%E5%BA%93iView%E7%9A%84%E4%BD%BF%E7%94%A8.html",
      "relativePath": "front-end/Vue组件库iView的使用.md",
      "key": "v-45df0c9f",
      "path": "/front-end/Vue%E7%BB%84%E4%BB%B6%E5%BA%93iView%E7%9A%84%E4%BD%BF%E7%94%A8.html",
      "headers": [
        {
          "level": 3,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 3,
          "title": "css如何设置div滚动显示？",
          "slug": "css如何设置div滚动显示"
        },
        {
          "level": 3,
          "title": "Vue组件库iView的使用",
          "slug": "vue组件库iview的使用"
        },
        {
          "level": 3,
          "title": "说在最后",
          "slug": "说在最后"
        }
      ],
      "excerpt": "<h3 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>最近接手了公司的一个项目,因为刚来公司,所以对公司的业务内容不够熟悉,做起来实在是很累.其实说白了就是自己的功力不够.很多不了解我的人都认为我很厉害,其实我什么都不会(emmmm).所以才应该从现在开始才应该多多积累,有什么小的东西就应该记录下来.有一句话说得很不错：每一天的小努力*365=巨大的飞跃！</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "import 和 require 的区别",
      "frontmatter": {
        "title": "import 和 require 的区别",
        "tags": [
          "ES6",
          "Node.js"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/import%20%E5%92%8C%20require%20%E7%9A%84%E5%8C%BA%E5%88%AB.html",
      "relativePath": "front-end/import 和 require 的区别.md",
      "key": "v-6fa8251d",
      "path": "/front-end/import%20%E5%92%8C%20require%20%E7%9A%84%E5%8C%BA%E5%88%AB.html",
      "headers": [
        {
          "level": 2,
          "title": "引言",
          "slug": "引言"
        },
        {
          "level": 2,
          "title": "import属于 ES6 规范",
          "slug": "import属于-es6-规范"
        },
        {
          "level": 3,
          "title": "import",
          "slug": "import"
        },
        {
          "level": 3,
          "title": "import 的导入方式",
          "slug": "import-的导入方式"
        },
        {
          "level": 3,
          "title": "exoprt和export default",
          "slug": "exoprt和export-default"
        },
        {
          "level": 3,
          "title": "exoprt和export default混合使用",
          "slug": "exoprt和export-default混合使用"
        },
        {
          "level": 3,
          "title": "as 重命名",
          "slug": "as-重命名"
        },
        {
          "level": 2,
          "title": "require 属于 CommonJS 规范",
          "slug": "require-属于-commonjs-规范"
        },
        {
          "level": 3,
          "title": "require",
          "slug": "require"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "excerpt": "<h2 id=\"引言\"><a class=\"header-anchor\" href=\"#引言\">#</a> 引言</h2>\n<p>我们在平时的前端开发中,都是用的 <code>import xxx from xxx</code> 进行模块导入.这几天笔者在学习Koa的开发,这里面大量涉及到Node.js的操作.而在Node.js的开发中,都是通过 <code>cosnt xxx = require(xxx)</code> 这种方式来进行模块导入.那么当前台后台在一起开发的时候,我常常把他们弄混.可能是太菜了😢,所以我花了半天的时间去学习了解他们两者的区别.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "nginx给tomcat配置反向代理",
      "frontmatter": {
        "title": "nginx给tomcat配置反向代理",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/nginx%E7%BB%99tomcat%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.html",
      "relativePath": "front-end/nginx给tomcat配置反向代理.md",
      "key": "v-a35e3ca0",
      "path": "/front-end/nginx%E7%BB%99tomcat%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.html",
      "headers": [
        {
          "level": 3,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "配置方法",
          "slug": "配置方法"
        }
      ],
      "excerpt": "<h3 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h3>\n<p>可以利用nginx作为分发服务器,给tomcat下面的项目做代理.</p>\n<h3 id=\"配置方法\"><a class=\"header-anchor\" href=\"#配置方法\">#</a> 配置方法</h3>\n<p>在nginx根目录下面的conf文件夹下,打开nginx.conf进行编辑(在http内添加如下内容):</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code># 设置tomcat代理\n upstream tomcat <span class=\"token punctuation\">{</span>\n       server <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n server <span class=\"token punctuation\">{</span>\n     listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n     server_name www<span class=\"token punctuation\">.</span>xieyezi<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n     location <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n         proxy_set_header        Host $host<span class=\"token punctuation\">;</span>\n         proxy_set_header        <span class=\"token constant\">X</span><span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span><span class=\"token constant\">IP</span> $remote_addr<span class=\"token punctuation\">;</span>\n         proxy_pass http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>tomcat<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "promise连续调用的问题",
      "frontmatter": {
        "title": "promise连续调用的问题",
        "tags": [
          "vue",
          "JS",
          "ES6"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/promise%E7%9A%84%E8%BF%9E%E7%BB%AD%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98.html",
      "relativePath": "front-end/promise的连续调用问题.md",
      "key": "v-d88baf3e",
      "path": "/front-end/promise%E7%9A%84%E8%BF%9E%E7%BB%AD%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98.html",
      "headers": [
        {
          "level": 3,
          "title": "问题的背景",
          "slug": "问题的背景"
        },
        {
          "level": 3,
          "title": "代码",
          "slug": "代码"
        },
        {
          "level": 3,
          "title": "遇见的问题",
          "slug": "遇见的问题"
        },
        {
          "level": 3,
          "title": "示意流程",
          "slug": "示意流程"
        },
        {
          "level": 3,
          "title": "问题分析",
          "slug": "问题分析"
        },
        {
          "level": 3,
          "title": "解决方法",
          "slug": "解决方法"
        },
        {
          "level": 3,
          "title": "原理",
          "slug": "原理"
        }
      ],
      "excerpt": "<h3 id=\"问题的背景\"><a class=\"header-anchor\" href=\"#问题的背景\">#</a> 问题的背景</h3>\n<p>最近在做自己的项目的时候,遇到了一个问题.我在组件里面监听了一个对象的变化.一旦发生变化.先通过这个对象的ID去进行异步请求.获取到一个属性:URL(播放地址).然后将这个属性绑定到audio的src属性上.然后再去利用this.$refs获取dom调用radio.play方法.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "vue-amap的bug -Cannot read property 'Ac' of null",
      "frontmatter": {
        "title": "vue-amap的bug -Cannot read property 'Ac' of null",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/vue-amap%E7%9A%84bug%20-Cannot%20read%20property%20'Ac'%20of%20null.html",
      "relativePath": "front-end/vue-amap的bug -Cannot read property 'Ac' of null.md",
      "key": "v-7f6e00bf",
      "path": "/front-end/vue-amap%E7%9A%84bug%20-Cannot%20read%20property%20'Ac'%20of%20null.html",
      "headers": [
        {
          "level": 2,
          "title": "问题产生的场景",
          "slug": "问题产生的场景"
        },
        {
          "level": 2,
          "title": "解决办法",
          "slug": "解决办法"
        }
      ],
      "excerpt": "<h2 id=\"问题产生的场景\"><a class=\"header-anchor\" href=\"#问题产生的场景\">#</a> 问题产生的场景</h2>\n<p>我们在项目中引入了<code>vue-amap</code>组件，我在每个标记点上绑定了点击事件，如下:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>  <span class=\"token keyword\">let</span> markerAlarm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          position<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>lon<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          draggable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n          animation<span class=\"token operator\">:</span> <span class=\"token string\">\"AMAP_ANIMATION_BOUNCE\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 标记点动画效果</span>\n          icon<span class=\"token operator\">:</span> <span class=\"token string\">\"/images/alarm.png\"</span><span class=\"token punctuation\">,</span>\n          events<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  self<span class=\"token punctuation\">.</span>markerRefs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function-variable function\">click</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                  self<span class=\"token punctuation\">.</span>windows <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                      enterprise_id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>enterprise_id<span class=\"token punctuation\">,</span>\n                      position<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>lon<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                      content<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n                      visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                      size<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                      events<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token function-variable function\">close</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                              self<span class=\"token punctuation\">.</span>windows<span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token punctuation\">}</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">let</span> crumbArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                      <span class=\"token punctuation\">{</span>\n                          url<span class=\"token operator\">:</span> <span class=\"token string\">\"/move\"</span><span class=\"token punctuation\">,</span>\n                          name<span class=\"token operator\">:</span> <span class=\"token string\">\"移动执法\"</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">{</span>\n                          url<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                          name<span class=\"token operator\">:</span> <span class=\"token string\">\"企业详情\"</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                  self<span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                      name<span class=\"token operator\">:</span> <span class=\"token string\">\"enterpriseDetail\"</span><span class=\"token punctuation\">,</span>\n                      query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                          enterpriseId<span class=\"token operator\">:</span> self<span class=\"token punctuation\">.</span>windows<span class=\"token punctuation\">.</span>enterprise_id<span class=\"token punctuation\">,</span>\n                          crumbArray<span class=\"token operator\">:</span> crumbArray\n                      <span class=\"token punctuation\">}</span>                                      \n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>windows<span class=\"token punctuation\">,</span> <span class=\"token string\">\"231423\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "一些语法块",
      "frontmatter": {
        "0": "t",
        "1": "i",
        "2": "t",
        "3": "l",
        "4": "e",
        "5": " ",
        "6": "一",
        "7": "些",
        "8": "语",
        "9": "法",
        "10": "块",
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E5%9D%97.html",
      "relativePath": "front-end/一些语法块.md",
      "key": "v-109c67ea",
      "path": "/front-end/%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E5%9D%97.html",
      "headers": [
        {
          "level": 2,
          "title": "防抖函数",
          "slug": "防抖函数"
        },
        {
          "level": 2,
          "title": "节流函数",
          "slug": "节流函数"
        },
        {
          "level": 2,
          "title": "组合式继承",
          "slug": "组合式继承"
        },
        {
          "level": 2,
          "title": "组合寄生式继承",
          "slug": "组合寄生式继承"
        },
        {
          "level": 2,
          "title": "实现New操作符",
          "slug": "实现new操作符"
        },
        {
          "level": 2,
          "title": "实现instance of",
          "slug": "实现instance-of"
        },
        {
          "level": 2,
          "title": "斐波那契数列",
          "slug": "斐波那契数列"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue子组件如何向父组件通信？",
      "frontmatter": {
        "title": "Vue子组件如何向父组件通信？",
        "tags": [
          "Vue",
          "JS"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E5%AD%90%E7%BB%84%E4%BB%B6%E5%92%8C%E7%88%B6%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html",
      "relativePath": "front-end/子组件和父组件通信.md",
      "key": "v-9504a97a",
      "path": "/front-end/%E5%AD%90%E7%BB%84%E4%BB%B6%E5%92%8C%E7%88%B6%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html",
      "headers": [
        {
          "level": 3,
          "title": "Vue子组件向父组件传递信息",
          "slug": "vue子组件向父组件传递信息"
        },
        {
          "level": 3,
          "title": "子父级组件信息传递的总结",
          "slug": "子父级组件信息传递的总结"
        }
      ],
      "excerpt": "<h3 id=\"vue子组件向父组件传递信息\"><a class=\"header-anchor\" href=\"#vue子组件向父组件传递信息\">#</a> Vue子组件向父组件传递信息</h3>\n<p>1.子组件通过自定义事件(emit Event)向父组件传递信息\n2.传递步骤及方法</p>\n<ul>\n<li>先在子组件中自定义一个方法</li>\n</ul>\n<!--beforebegin--><div class=\"language-HTML extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendMsg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>发送数据<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  //自定义了一个sendMsg的方法\n</code></pre>\n<!--beforeend--></div><!--afterend-->",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "防抖和节流",
      "frontmatter": {
        "title": "防抖和节流",
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html",
      "relativePath": "front-end/防抖和节流.md",
      "key": "v-c3b2a58e",
      "path": "/front-end/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81.html",
      "headers": [
        {
          "level": 2,
          "title": "防抖",
          "slug": "防抖"
        },
        {
          "level": 2,
          "title": "节流",
          "slug": "节流"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "解决移动端300ms延迟的问题",
      "frontmatter": {
        "title": "解决移动端300ms延迟的问题",
        "tags": [
          "Vue"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF300ms%E5%BB%B6%E8%BF%9F%E7%82%B9%E5%87%BB%E7%9A%84%E9%97%AE%E9%A2%98.html",
      "relativePath": "front-end/解决移动端300ms延迟点击的问题.md",
      "key": "v-83e1b8fa",
      "path": "/front-end/%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF300ms%E5%BB%B6%E8%BF%9F%E7%82%B9%E5%87%BB%E7%9A%84%E9%97%AE%E9%A2%98.html",
      "headers": [
        {
          "level": 3,
          "title": "移动端300ms延迟",
          "slug": "移动端300ms延迟"
        },
        {
          "level": 3,
          "title": "如何解决？",
          "slug": "如何解决"
        }
      ],
      "excerpt": "<h3 id=\"移动端300ms延迟\"><a class=\"header-anchor\" href=\"#移动端300ms延迟\">#</a> 移动端300ms延迟</h3>\n<p>移动端浏览器click事件为什么会有300ms的延迟呢？因为在手机上有个双击方案：在手机上快速点击两下，实现页面放大；再次双击，恢复到原始比例。\n那它是如何实现的呢？浏览器在捕捉到第一次点击事件后，会等待一段时间，如果在这段时间内，用户没有再次进行点击操作的话，就执行单击事件；如果用户进行了第二次点击操作的话，就会执行双击事件。这段等待的时间大约300ms。</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "笔记📒",
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/notes/",
      "relativePath": "notes/README.md",
      "key": "v-30edd66b",
      "path": "/notes/",
      "headers": [
        {
          "level": 3,
          "title": "笔记📒",
          "slug": "笔记📒"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "作用域链-闭包-执行上下文",
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/notes/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE-%E9%97%AD%E5%8C%85-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html",
      "relativePath": "notes/作用域链-闭包-执行上下文.md",
      "key": "v-3b40c3b4",
      "path": "/notes/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE-%E9%97%AD%E5%8C%85-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html",
      "headers": [
        {
          "level": 3,
          "title": "作用域链-闭包-执行上下文",
          "slug": "作用域链-闭包-执行上下文"
        },
        {
          "level": 3,
          "title": "分析代码",
          "slug": "分析代码"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "1.原型链继承",
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/notes/%E7%BB%A7%E6%89%BF.html",
      "relativePath": "notes/继承.md",
      "key": "v-4862f750",
      "path": "/notes/%E7%BB%A7%E6%89%BF.html",
      "headers": [
        {
          "level": 3,
          "title": "1.原型链继承",
          "slug": "_1-原型链继承"
        },
        {
          "level": 3,
          "title": "2.借用构造函数（经典继承）",
          "slug": "_2-借用构造函数-经典继承"
        },
        {
          "level": 3,
          "title": "3.组合继承",
          "slug": "_3-组合继承"
        },
        {
          "level": 3,
          "title": "4.原型式继承",
          "slug": "_4-原型式继承"
        },
        {
          "level": 3,
          "title": "5. 寄生式继承",
          "slug": "_5-寄生式继承"
        },
        {
          "level": 3,
          "title": "6. 寄生组合式继承",
          "slug": "_6-寄生组合式继承"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "docker-compose 部署项目",
      "frontmatter": {
        "title": "docker-compose 部署项目",
        "tags": [
          "docker"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/docker/docker-compose%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE.html",
      "relativePath": "other/docker/docker-compose部署项目.md",
      "key": "v-3b8dd054",
      "path": "/other/docker/docker-compose%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE.html",
      "headers": [
        {
          "level": 2,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 2,
          "title": "开始动手",
          "slug": "开始动手"
        },
        {
          "level": 2,
          "title": "部署",
          "slug": "部署"
        },
        {
          "level": 2,
          "title": "部署的架构图",
          "slug": "部署的架构图"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Dockerfile文件的编写",
      "frontmatter": {
        "title": "Dockerfile文件的编写",
        "tags": [
          "docker"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/docker/Dockerfile-Note.html",
      "relativePath": "other/docker/Dockerfile-Note.md",
      "key": "v-1e125f9f",
      "path": "/other/docker/Dockerfile-Note.html",
      "headers": [
        {
          "level": 3,
          "title": "Dockerfile 文件的编写",
          "slug": "dockerfile-文件的编写-2"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "docker基本知识",
      "frontmatter": {
        "title": "docker基本知识",
        "tags": [
          "docker",
          "nginx"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/docker/",
      "relativePath": "other/docker/README.md",
      "key": "v-1ec75e5c",
      "path": "/other/docker/",
      "headers": [
        {
          "level": 3,
          "title": "镜像(image)文件",
          "slug": "镜像-image-文件"
        },
        {
          "level": 3,
          "title": "容器(container)文件",
          "slug": "容器-container-文件"
        },
        {
          "level": 3,
          "title": "Dcokerfile 文件",
          "slug": "dcokerfile-文件"
        },
        {
          "level": 3,
          "title": "创建 image 文件",
          "slug": "创建-image-文件"
        },
        {
          "level": 3,
          "title": "生成容器",
          "slug": "生成容器"
        },
        {
          "level": 3,
          "title": "其他有用的命令",
          "slug": "其他有用的命令"
        },
        {
          "level": 3,
          "title": "Docker Compose 工具",
          "slug": "docker-compose-工具"
        },
        {
          "level": 3,
          "title": "docker 更改镜像加速器",
          "slug": "docker-更改镜像加速器"
        },
        {
          "level": 3,
          "title": "需要继续深入学习的东西",
          "slug": "需要继续深入学习的东西"
        },
        {
          "level": 3,
          "title": "现在的问题",
          "slug": "现在的问题"
        },
        {
          "level": 3,
          "title": "查看 container 的 IP 地址",
          "slug": "查看-container-的-ip-地址"
        }
      ],
      "excerpt": "<h1 id=\"docker-基本知识\"><a class=\"header-anchor\" href=\"#docker-基本知识\">#</a> docker 基本知识</h1>\n<h3 id=\"镜像-image-文件\"><a class=\"header-anchor\" href=\"#镜像-image-文件\">#</a> 镜像(image)文件</h3>\n<ol>\n<li>docker 把应用程序及其依赖，打包在 image 文件里面</li>\n<li>image 文件可以看做是容器的模板，docker 根据 image 文件生成容器的实例</li>\n<li>同一个 image 文件，可以生成多个同时运行的模板</li>\n<li><code>docker image pull</code> 是抓取 image 文件的命令 (eg: <code>docker image pull hello-world</code>)</li>\n<li>使用<code>docker image ls</code>查看本机下面的已有的 docker image 文件</li>\n<li>运行 image 文件:<code>docker container run hello-world</code>,该命令会从 image 文件，生成一个正在运行的容器实例</li>\n<li>终止正在运行的容器: <code>docker container kill [containID]</code></li>\n</ol>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "git基本知识",
      "frontmatter": {
        "title": "git基本知识",
        "tags": [
          "git",
          "GitHub"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/git/",
      "relativePath": "other/git/README.md",
      "key": "v-26a13a74",
      "path": "/other/git/",
      "headers": [
        {
          "level": 2,
          "title": "Git是什么？",
          "slug": "git是什么"
        },
        {
          "level": 2,
          "title": "什么是版本控制？",
          "slug": "什么是版本控制"
        },
        {
          "level": 3,
          "title": "集中化的版本控制系统和分布式版本控制系统",
          "slug": "集中化的版本控制系统和分布式版本控制系统"
        },
        {
          "level": 3,
          "title": "为什么使用Git？",
          "slug": "为什么使用git"
        },
        {
          "level": 2,
          "title": "安装",
          "slug": "安装"
        },
        {
          "level": 3,
          "title": "Windows 环境安装",
          "slug": "windows-环境安装"
        },
        {
          "level": 3,
          "title": "Mac 环境安装",
          "slug": "mac-环境安装"
        },
        {
          "level": 2,
          "title": "配置",
          "slug": "配置"
        },
        {
          "level": 3,
          "title": "用户信息",
          "slug": "用户信息"
        },
        {
          "level": 3,
          "title": ".gitignore",
          "slug": "gitignore"
        },
        {
          "level": 3,
          "title": "git基本原理简介",
          "slug": "git基本原理简介"
        }
      ],
      "excerpt": "<h2 id=\"git是什么\"><a class=\"header-anchor\" href=\"#git是什么\">#</a> Git是什么？</h2>\n<p>Git 是一个开源的分布式版本控制系统.</p>\n<h2 id=\"什么是版本控制\"><a class=\"header-anchor\" href=\"#什么是版本控制\">#</a> 什么是版本控制？</h2>\n<p>版本控制是一种记录一个或若干文件内容变化,以便将来查阅特定版本修订情况的系统.</p>\n<h3 id=\"集中化的版本控制系统和分布式版本控制系统\"><a class=\"header-anchor\" href=\"#集中化的版本控制系统和分布式版本控制系统\">#</a> 集中化的版本控制系统和分布式版本控制系统</h3>\n<p>集中化的版本控制系统,都有一个单一的集中管理的服务器,保存所有文件的修订版本,而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新.也就是说,</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "docker部署vue静态项目",
      "frontmatter": {
        "title": "docker部署vue静态项目",
        "tags": [
          "docker"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/docker/docker%E9%83%A8%E7%BD%B2vue%E9%9D%99%E6%80%81%E9%A1%B9%E7%9B%AE.html",
      "relativePath": "other/docker/docker部署vue静态项目.md",
      "key": "v-b7d3980a",
      "path": "/other/docker/docker%E9%83%A8%E7%BD%B2vue%E9%9D%99%E6%80%81%E9%A1%B9%E7%9B%AE.html",
      "headers": [
        {
          "level": 2,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 2,
          "title": "部署步骤",
          "slug": "部署步骤"
        }
      ],
      "excerpt": "<h2 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h2>\n<p>我在网上搜索了很多docker部署vue项目的教程，其中很多的文章不乏都是先将vue项目执行<code>npm run build</code> 在本地进行打包，传到自己的仓库去，然后到服务器去拉取我们的代码，获取<code>dist</code>文件，再将该文件挂载到dockr容器内。其实这种操作应当是有缺陷的，我们应当把打包的操作也放到docker的镜像里面去操作。</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Git常用命令",
      "frontmatter": {
        "title": "Git常用命令",
        "readingShow": "top"
      },
      "regularPath": "/other/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",
      "relativePath": "other/git/git常用命令.md",
      "key": "v-4199ebe0",
      "path": "/other/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/other/git/git-flow%E6%B5%81%E7%A8%8B.html",
      "relativePath": "other/git/git-flow流程.md",
      "key": "v-29843ca9",
      "path": "/other/git/git-flow%E6%B5%81%E7%A8%8B.html",
      "headers": [
        {
          "level": 3,
          "title": "Mac平台安装",
          "slug": "mac平台安装"
        },
        {
          "level": 3,
          "title": "初始化",
          "slug": "初始化"
        },
        {
          "level": 3,
          "title": "行为/Action",
          "slug": "行为-action"
        },
        {
          "level": 3,
          "title": "feature流程",
          "slug": "feature流程"
        },
        {
          "level": 3,
          "title": "release流程",
          "slug": "release流程"
        },
        {
          "level": 3,
          "title": "hotfix 流程",
          "slug": "hotfix-流程"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Git流程",
      "frontmatter": {
        "title": "Git流程",
        "readingShow": "top"
      },
      "regularPath": "/other/git/git%E6%B5%81%E7%A8%8B%E6%AD%A5%E9%AA%A4.html",
      "relativePath": "other/git/git流程步骤.md",
      "key": "v-3c851f55",
      "path": "/other/git/git%E6%B5%81%E7%A8%8B%E6%AD%A5%E9%AA%A4.html",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "删除github项目中指定的目录和文件",
      "frontmatter": {
        "title": "删除github项目中指定的目录和文件",
        "tags": [
          "git",
          "GitHub"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/git/%E5%88%A0%E9%99%A4github%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E6%88%96%E6%96%87%E4%BB%B6.html",
      "relativePath": "other/git/删除github项目中指定目录或文件.md",
      "key": "v-b8353cb4",
      "path": "/other/git/%E5%88%A0%E9%99%A4github%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E6%88%96%E6%96%87%E4%BB%B6.html",
      "headers": [
        {
          "level": 3,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "删除指定目录或文件",
          "slug": "删除指定目录或文件"
        }
      ],
      "excerpt": "<h3 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h3>\n<p>有时候我们将项目托管至github之后才发现,我们可能需要删除部分指定的目录或者文件,但是直接在<code>.gitignore</code>文件标注说明,推送到github之后,你会发现想要删除的目录仍然没有删除,所以此时我们需要使用git命令来进行删除.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "我的2018，都做了些什么？",
      "frontmatter": {
        "title": "我的2018，都做了些什么？",
        "tags": [
          "感悟",
          "总结"
        ],
        "readingShow": "top"
      },
      "regularPath": "/other/life/%E6%88%91%E7%9A%842018%E5%B9%B4%E6%80%BB%E7%BB%93.html",
      "relativePath": "other/life/我的2018年总结.md",
      "key": "v-5129cc90",
      "path": "/other/life/%E6%88%91%E7%9A%842018%E5%B9%B4%E6%80%BB%E7%BB%93.html",
      "headers": [
        {
          "level": 3,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "为什么选择前端？",
          "slug": "为什么选择前端"
        },
        {
          "level": 3,
          "title": "做了什么？",
          "slug": "做了什么"
        },
        {
          "level": 3,
          "title": "收获了什么？",
          "slug": "收获了什么"
        },
        {
          "level": 3,
          "title": "思考了些什么？",
          "slug": "思考了些什么"
        },
        {
          "level": 3,
          "title": "接下来做什么？",
          "slug": "接下来做什么"
        }
      ],
      "excerpt": "<h3 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h3>\n<p>我先自己解释一下，在上次更新博客之后，我长达一个月没有更新自己的博客的原因。我上个月15号去了昆明某军区，作为外援，在军区秘密开发一个月。这一个月以来，每天都在加班，所以根本没有时间更新自己的博客。</p>\n<h3 id=\"为什么选择前端\"><a class=\"header-anchor\" href=\"#为什么选择前端\">#</a> 为什么选择前端？</h3>\n<p>2018年，应该算是我人生的一个转折点吧。特别是下半年，算是正式走入社会。</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "React基础知识",
      "frontmatter": {
        "title": "React基础知识",
        "readingShow": "top"
      },
      "regularPath": "/front-end/React%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",
      "relativePath": "front-end/React基础知识.md",
      "key": "v-12dc5028",
      "path": "/front-end/React%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Vue3写一个疫情查询小工具",
      "frontmatter": {
        "title": "Vue3写一个疫情查询小工具",
        "readingShow": "top"
      },
      "regularPath": "/front-end/Vue3%E5%86%99%E4%B8%80%E4%B8%AA%E7%96%AB%E6%83%85%E6%9F%A5%E8%AF%A2%E5%B0%8F%E5%B7%A5%E5%85%B7.html",
      "relativePath": "front-end/Vue3写一个疫情查询小工具.md",
      "key": "v-8480a8c8",
      "path": "/front-end/Vue3%E5%86%99%E4%B8%80%E4%B8%AA%E7%96%AB%E6%83%85%E6%9F%A5%E8%AF%A2%E5%B0%8F%E5%B7%A5%E5%85%B7.html",
      "headers": [
        {
          "level": 2,
          "title": "Vue3 简单知识",
          "slug": "vue3-简单知识"
        },
        {
          "level": 3,
          "title": "setup",
          "slug": "setup"
        },
        {
          "level": 3,
          "title": "reactive()",
          "slug": "reactive"
        },
        {
          "level": 3,
          "title": "ref",
          "slug": "ref"
        },
        {
          "level": 3,
          "title": "开始动手",
          "slug": "开始动手"
        },
        {
          "level": 3,
          "title": "Docker 部署",
          "slug": "docker-部署"
        },
        {
          "level": 3,
          "title": "效果截图",
          "slug": "效果截图"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "Hexo+Github+Netlify搭建个人博客",
      "frontmatter": {
        "title": "Hexo+Github+Netlify搭建个人博客",
        "tags": [
          "Hexo",
          "GitHub",
          "Netlify"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/hexo+github+netlify%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html",
      "relativePath": "front-end/hexo+github+netlify搭建个人博客.md",
      "key": "v-1ff07298",
      "path": "/front-end/hexo+github+netlify%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html",
      "headers": [
        {
          "level": 3,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "寻找方案",
          "slug": "寻找方案"
        },
        {
          "level": 3,
          "title": "开始动手",
          "slug": "开始动手"
        },
        {
          "level": 3,
          "title": "部署",
          "slug": "部署"
        },
        {
          "level": 3,
          "title": "思路",
          "slug": "思路"
        },
        {
          "level": 3,
          "title": "绑定自己的域名",
          "slug": "绑定自己的域名"
        },
        {
          "level": 3,
          "title": "设置Https证书",
          "slug": "设置https证书"
        }
      ],
      "excerpt": "<h3 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h3>\n<p>我的博客在曾经的很长一段时间以内,我都是将博客静态页面托管到<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Github pages<OutboundLink/></a>进行渲染的,但是大家都知道,我们国内访问GitHub如果不挂<s>翻墙</s>的话,访问速度非常慢☹️.虽然我的博客一直以来都没有太多的访问量,但是作为一个追求极致体验的人,怎么忍受得了呢 🤟.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "javascript原型与原型链的深度解析",
      "frontmatter": {
        "title": "javascript原型与原型链的深度解析",
        "readingShow": "top"
      },
      "regularPath": "/front-end/javascript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.html",
      "relativePath": "front-end/javascript原型与原型链的深度解析.md",
      "key": "v-c8b63634",
      "path": "/front-end/javascript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 2,
          "title": "原型",
          "slug": "原型"
        },
        {
          "level": 2,
          "title": "原型链",
          "slug": "原型链"
        },
        {
          "level": 2,
          "title": "javascript中的类",
          "slug": "javascript中的类"
        },
        {
          "level": 2,
          "title": "new的实现",
          "slug": "new的实现"
        },
        {
          "level": 2,
          "title": "instanceof的实现",
          "slug": "instanceof的实现"
        },
        {
          "level": 2,
          "title": "javascript的继承",
          "slug": "javascript的继承"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "记一次自己封装NPM包的经历",
      "frontmatter": {
        "title": "记一次自己封装NPM包的经历",
        "tags": [
          "npm",
          "rollup",
          "webpack",
          "localStorage",
          "sessionStorage"
        ],
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85NPM%E5%8C%85%E7%9A%84%E7%BB%8F%E5%8E%86.html",
      "relativePath": "front-end/记一次自己封装NPM包的经历.md",
      "key": "v-7073541c",
      "path": "/front-end/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85NPM%E5%8C%85%E7%9A%84%E7%BB%8F%E5%8E%86.html",
      "headers": [
        {
          "level": 3,
          "title": "说在前面",
          "slug": "说在前面"
        },
        {
          "level": 3,
          "title": "说得简单,动手困难",
          "slug": "说得简单-动手困难"
        },
        {
          "level": 3,
          "title": "webpack",
          "slug": "webpack"
        },
        {
          "level": 3,
          "title": "libraryTarget",
          "slug": "librarytarget"
        },
        {
          "level": 3,
          "title": "rollup",
          "slug": "rollup"
        },
        {
          "level": 3,
          "title": "将包上传至 npm",
          "slug": "将包上传至-npm"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "excerpt": "<h3 id=\"说在前面\"><a class=\"header-anchor\" href=\"#说在前面\">#</a> 说在前面</h3>\n<p>最近一直在忙自己的毕业设计,在做的过程中,有的地方要用到缓存.我采用了 localStorage 和 sessionStorage 的方式进行的缓存,并完整地实现了自己想要的功能.但是我突然想到前端的&quot;\b 模块化开发&quot;,这块完全可以独立出来,将其封装为一个统一的 API,想要使用的时候就引入使用,于是我将其封装为了一个将 localStorage 和 sessionStorage 统一在一起的功能函数:<code>xieyezi-storage.js</code>.我存放在自己的电脑里面,以便我自己以后使用,但是我突然想到了程序员的&quot;开源精神&quot;😹,好吧其实是想到,每次我们需要安装一个包的时候,我们都是采用<code>npm install xxx</code>的方式进行引入,然后在使用的时候,就通过<code>import xxx from xxx</code> 这样的方式进行使用.于是我也想要将我的功能函数封装为一个 npm 包,并且发布到<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">npm<OutboundLink/></a>👆 上面去,那也算是为我们开源作出了一定的贡献.</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "前言",
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/notes/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html",
      "relativePath": "notes/原型与原型链.md",
      "key": "v-5bf32d96",
      "path": "/notes/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 3,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 3,
          "title": "原型",
          "slug": "原型"
        },
        {
          "level": 3,
          "title": "原型链",
          "slug": "原型链"
        },
        {
          "level": 3,
          "title": "javascript中的类",
          "slug": "javascript中的类"
        },
        {
          "level": 3,
          "title": "new的实现",
          "slug": "new的实现"
        },
        {
          "level": 3,
          "title": "instanceof的实现",
          "slug": "instanceof的实现"
        },
        {
          "level": 3,
          "title": "javascript的继承",
          "slug": "javascript的继承"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "git代码提交规范",
      "frontmatter": {
        "title": "git代码提交规范",
        "readingShow": "top"
      },
      "regularPath": "/other/git/git%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83.html",
      "relativePath": "other/git/git 提交规范.md",
      "key": "v-53cd9b4e",
      "path": "/other/git/git%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83.html",
      "headers": [
        {
          "level": 2,
          "title": "commit message",
          "slug": "commit-message"
        },
        {
          "level": 2,
          "title": "AngularJS 提交规范",
          "slug": "angularjs-提交规范"
        },
        {
          "level": 2,
          "title": "继续优化",
          "slug": "继续优化"
        },
        {
          "level": 2,
          "title": "eslint",
          "slug": "eslint"
        },
        {
          "level": 2,
          "title": "prettier",
          "slug": "prettier"
        },
        {
          "level": 2,
          "title": "commitlint 和 commitlint-config-cz",
          "slug": "commitlint-和-commitlint-config-cz"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "excerpt": "<h1 id=\"git-代码提交规范\"><a class=\"header-anchor\" href=\"#git-代码提交规范\">#</a> git 代码提交规范</h1>\n<p>平时自己写代码的时候，每当需要提交代码到 GitHub 的时候，我一般的操作是直接<code>git commit 'xxxx'</code>，然后直接就推送了，后来项目变得稍微有点大了，还有一些其他小伙伴加入了项目的开发，他们给我项目仓库提交代码，长时间之后去看他们的提交，甚至都不知道他们干了啥，这就很尴尬了。所以 git 的提交必须要规范才行，尤其是在多人协作的项目中，如果 Git 的提交说明精准，在后期协作以及后期 review 会变得有据可查，项目的开发可以根据规范的提交说明快速生成开发日志，从而方便开发者或用户追踪项目的开发信息和功能特性。</p>\n",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "2019一路走来",
      "frontmatter": {
        "title": "2019一路走来",
        "readingShow": "top"
      },
      "regularPath": "/other/life/",
      "relativePath": "other/life/README.md",
      "key": "v-c4b2ecdc",
      "path": "/other/life/",
      "headers": [
        {
          "level": 2,
          "title": "沿途都是风景",
          "slug": "沿途都是风景"
        },
        {
          "level": 2,
          "title": "毕业",
          "slug": "毕业"
        },
        {
          "level": 2,
          "title": "成都",
          "slug": "成都"
        },
        {
          "level": 2,
          "title": "回到重庆",
          "slug": "回到重庆"
        },
        {
          "level": 2,
          "title": "琐碎的进步",
          "slug": "琐碎的进步"
        },
        {
          "level": 2,
          "title": "新的自己",
          "slug": "新的自己"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "vuex4都beta了，vuex5还会远吗？",
      "frontmatter": {
        "title": "vuex4都beta了，vuex5还会远吗？",
        "readingShow": "top"
      },
      "regularPath": "/front-end/vuex5%E8%A6%81%E8%A7%A3%E5%86%B3%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98.html",
      "relativePath": "front-end/vuex5要解决哪些问题.md",
      "key": "v-21a571c7",
      "path": "/front-end/vuex5%E8%A6%81%E8%A7%A3%E5%86%B3%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98.html",
      "headers": [
        {
          "level": 3,
          "title": "vuex4 + vue3 的基本使用",
          "slug": "vuex4-vue3-的基本使用"
        },
        {
          "level": 3,
          "title": "添加modules",
          "slug": "添加modules"
        },
        {
          "level": 3,
          "title": "结合typescript",
          "slug": "结合typescript"
        },
        {
          "level": 3,
          "title": "vuex5新特性",
          "slug": "vuex5新特性"
        },
        {
          "level": 3,
          "title": "实现我们自己的状态管理",
          "slug": "实现我们自己的状态管理"
        },
        {
          "level": 3,
          "title": "说到最后",
          "slug": "说到最后"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "商品多规格选择-sku算法",
      "frontmatter": {
        "title": "商品多规格选择-sku算法",
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E5%95%86%E5%93%81%E5%A4%9A%E8%A7%84%E6%A0%BC%E9%80%89%E6%8B%A9-sku%E7%AE%97%E6%B3%95.html",
      "relativePath": "front-end/商品多规格选择-sku算法.md",
      "key": "v-4df15178",
      "path": "/front-end/%E5%95%86%E5%93%81%E5%A4%9A%E8%A7%84%E6%A0%BC%E9%80%89%E6%8B%A9-sku%E7%AE%97%E6%B3%95.html",
      "headers": [
        {
          "level": 2,
          "title": "什么是 sku",
          "slug": "什么是-sku"
        },
        {
          "level": 2,
          "title": "业务场景",
          "slug": "业务场景"
        },
        {
          "level": 2,
          "title": "图",
          "slug": "图"
        },
        {
          "level": 3,
          "title": "什么是图",
          "slug": "什么是图"
        },
        {
          "level": 3,
          "title": "邻接矩阵",
          "slug": "邻接矩阵"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 3,
          "title": "创建邻接矩阵",
          "slug": "创建邻接矩阵"
        },
        {
          "level": 3,
          "title": "创建多规格选择邻接矩阵",
          "slug": "创建多规格选择邻接矩阵"
        },
        {
          "level": 3,
          "title": "页面渲染",
          "slug": "页面渲染"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "frontmatter": {
        "readingShow": "top"
      },
      "regularPath": "/front-end/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84React.html",
      "relativePath": "front-end/如何构建你自己的React.md",
      "key": "v-2341bf08",
      "path": "/front-end/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84React.html",
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    },
    {
      "title": "react 入门必知必会知识点(万字总结✍)",
      "frontmatter": {
        "title": "react 入门必知必会知识点(万字总结✍)",
        "readingShow": "top"
      },
      "regularPath": "/front-end/react%E5%85%A5%E9%97%A8%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "relativePath": "front-end/react入门必知必会知识点.md",
      "key": "v-5fffd228",
      "path": "/front-end/react%E5%85%A5%E9%97%A8%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "headers": [
        {
          "level": 2,
          "title": "组件通信",
          "slug": "组件通信"
        },
        {
          "level": 3,
          "title": "props",
          "slug": "props"
        },
        {
          "level": 3,
          "title": "Context",
          "slug": "context"
        },
        {
          "level": 3,
          "title": "OnRef",
          "slug": "onref"
        },
        {
          "level": 3,
          "title": "ref",
          "slug": "ref"
        },
        {
          "level": 3,
          "title": "第三方工具",
          "slug": "第三方工具"
        },
        {
          "level": 2,
          "title": "路由",
          "slug": "路由"
        },
        {
          "level": 3,
          "title": "react-router",
          "slug": "react-router"
        },
        {
          "level": 3,
          "title": "路由组件",
          "slug": "路由组件"
        },
        {
          "level": 3,
          "title": "匹配组件",
          "slug": "匹配组件"
        },
        {
          "level": 3,
          "title": "导航组件",
          "slug": "导航组件"
        },
        {
          "level": 2,
          "title": "状态管理",
          "slug": "状态管理"
        },
        {
          "level": 3,
          "title": "redux",
          "slug": "redux"
        },
        {
          "level": 3,
          "title": "react-redux 和 redux",
          "slug": "react-redux-和-redux"
        },
        {
          "level": 3,
          "title": "connected-react-router 和 redux",
          "slug": "connected-react-router-和-redux"
        },
        {
          "level": 3,
          "title": "小结一下",
          "slug": "小结一下"
        },
        {
          "level": 3,
          "title": "dva",
          "slug": "dva"
        },
        {
          "level": 2,
          "title": "生命周期(新旧对比)",
          "slug": "生命周期-新旧对比"
        },
        {
          "level": 3,
          "title": "旧版生命周期",
          "slug": "旧版生命周期"
        },
        {
          "level": 3,
          "title": "新版生命周期",
          "slug": "新版生命周期"
        },
        {
          "level": 3,
          "title": "static getDerivedStateFromProps",
          "slug": "static-getderivedstatefromprops"
        },
        {
          "level": 3,
          "title": "getSnapshotBeforeUpdate",
          "slug": "getsnapshotbeforeupdate"
        },
        {
          "level": 3,
          "title": "版本迁移",
          "slug": "版本迁移"
        },
        {
          "level": 2,
          "title": "性能优化",
          "slug": "性能优化"
        },
        {
          "level": 3,
          "title": "shouldComponentUpdate",
          "slug": "shouldcomponentupdate"
        },
        {
          "level": 3,
          "title": "PureComponet",
          "slug": "purecomponet"
        },
        {
          "level": 3,
          "title": "Memo",
          "slug": "memo"
        },
        {
          "level": 2,
          "title": "hooks",
          "slug": "hooks"
        },
        {
          "level": 3,
          "title": "useState",
          "slug": "usestate"
        },
        {
          "level": 3,
          "title": "useEffect",
          "slug": "useeffect"
        },
        {
          "level": 3,
          "title": "useRef",
          "slug": "useref"
        },
        {
          "level": 3,
          "title": "useContext",
          "slug": "usecontext"
        },
        {
          "level": 3,
          "title": "useMemo",
          "slug": "usememo"
        },
        {
          "level": 3,
          "title": "useCallback",
          "slug": "usecallback"
        },
        {
          "level": 3,
          "title": "自定义 hook",
          "slug": "自定义-hook"
        },
        {
          "level": 2,
          "title": "项目配置",
          "slug": "项目配置"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "参考",
          "slug": "参考"
        }
      ],
      "lastUpdated": "3/16/2021, 6:20:07 PM"
    }
  ],
  "themeConfig": {
    "logo": "/logo.png",
    "smoothScroll": true,
    "sidebarDepth": 1,
    "repo": "xieyezi/vuepress-blog",
    "docsRepo": "xieyezi/vuepress-blog",
    "docsBranch": "master",
    "editLinks": true,
    "editLinkText": "帮助我改善这个页面",
    "lastUpdated": "最后更新时间",
    "backToTop": true,
    "algolia": {
      "apiKey": "8d4a49be7a5f88d284dfd13ea7adc58a",
      "indexName": "xieyezi"
    },
    "sidebar": {
      "/front-end/": [
        [
          "/front-end/",
          "前端"
        ],
        [
          "/front-end/vuex5要解决哪些问题",
          "vuex5要解决哪些问题"
        ],
        [
          "/front-end/如何构建你自己的React",
          "如何构建你自己的React"
        ],
        [
          "/front-end/商品多规格选择-sku算法",
          "商品多规格选择-sku算法"
        ],
        [
          "/front-end/react入门必知必会知识点",
          "react 入门必知必会知识点(万字总结)"
        ],
        [
          "/front-end/Vue3写一个疫情查询小工具",
          "Vue3写一个疫情查询小工具"
        ],
        [
          "/front-end/2019nCoV疫情地图",
          "2019nCoV疫情地图"
        ],
        [
          "/front-end/javascript原型与原型链的深度解析",
          "javascript原型与原型链的深度解析"
        ],
        [
          "/front-end/React基础知识",
          "React基础知识"
        ],
        [
          "/front-end/Vue.$nextTick解析",
          "Vue.$nextTick解析"
        ],
        [
          "/front-end/一些语法块",
          "一些语法块"
        ],
        [
          "/front-end/防抖和节流",
          "防抖和节流"
        ],
        [
          "/front-end/import 和 require 的区别",
          "import 和 require 的区别"
        ],
        [
          "/front-end/WIndows搭建最完美的VS code开发平台",
          "WIndows搭建最完美的VS code开发平台"
        ],
        [
          "/front-end/hexo+github+netlify搭建个人博客",
          "hexo+github+netlify搭建个人博客"
        ],
        [
          "/front-end/VueX的相关使用",
          "VueX的相关使用"
        ],
        [
          "/front-end/Vue使用axios的get和post请求",
          "Vue使用axios的get和post请求"
        ],
        [
          "/front-end/Vue多个组件映射到同一个组件,页面不刷新？",
          "Vue多个组件映射到同一个组件,页面不刷新？"
        ],
        [
          "/front-end/Tomcat的配置域名访问",
          "Tomcat的配置域名访问"
        ],
        [
          "/front-end/Vue Cli3.0请求本地模拟数据",
          "Vue Cli3.0请求本地模拟数据"
        ],
        [
          "/front-end/Vue-cli 3.0解决跨域问题",
          "Vue-cli 3.0解决跨域问题"
        ],
        [
          "/front-end/Vue-cli3.0+Hbuilder打包App",
          "Vue-cli3.0+Hbuilder打包App"
        ],
        [
          "/front-end/Vue开发环境的搭建",
          "Vue开发环境的搭建"
        ],
        [
          "/front-end/Vue插槽与缓存",
          "Vue插槽与缓存"
        ],
        [
          "/front-end/Vue组件",
          "Vue组件"
        ],
        [
          "/front-end/Vue组件库iView的使用",
          "Vue组件库iView的使用"
        ],
        [
          "/front-end/Vue路由的基本加载",
          "Vue路由的基本加载"
        ],
        [
          "/front-end/Vue过渡与动画",
          "Vue过渡与动画"
        ],
        [
          "/front-end/better-scroll插件初始化后没有效果",
          "better-scroll插件初始化后没有效果"
        ],
        [
          "/front-end/call和apply的区别",
          "call和apply的区别"
        ],
        [
          "/front-end/css超出部分显示省略号",
          "css超出部分显示省略号"
        ],
        [
          "/front-end/nginx给tomcat配置反向代理",
          "nginx给tomcat配置反向代理"
        ],
        [
          "/front-end/promise的连续调用问题",
          "promise的连续调用问题"
        ],
        [
          "/front-end/vue-amap的bug -Cannot read property 'Ac' of null",
          "vue-amap的bug -Cannot read property 'Ac' of null"
        ],
        [
          "/front-end/子组件和父组件通信",
          "子组件和父组件通信"
        ],
        [
          "/front-end/解决移动端300ms延迟点击的问题",
          "解决移动端300ms延迟点击的问题"
        ],
        [
          "/front-end/记一次自己封装NPM包的经历",
          "记一次自己封装NPM包的经历"
        ],
        [
          "/front-end/Es6的学习笔记1",
          "Es6的学习笔记1"
        ],
        [
          "/front-end/Es6的学习笔记2",
          "Es6的学习笔记2"
        ],
        [
          "/front-end/Gulp的基本使用",
          "Gulp的基本使用"
        ]
      ],
      "/notes/": [
        [
          "/notes/",
          "笔记"
        ],
        [
          "/notes/原型与原型链",
          "原型与原型链"
        ],
        [
          "/notes/继承",
          "javascript的继承"
        ],
        [
          "/notes/作用域链-闭包-执行上下文",
          "作用域链-闭包-执行上下文"
        ]
      ],
      "/flutter/article/": [
        [
          "/flutter/article/",
          "flutter"
        ]
      ],
      "/flutter/widgets/": [
        [
          "/flutter/widgets/",
          "AboutDialog"
        ]
      ],
      "/other/git/": [
        [
          "/other/git/git-flow流程",
          "git-flow流程解析"
        ],
        [
          "/other/git/",
          "git基础知识"
        ],
        [
          "/other/git/git 提交规范",
          "git 提交规范"
        ],
        [
          "/other/git/git常用命令",
          "git常用命令"
        ],
        [
          "/other/git/git流程步骤",
          "git流程步骤"
        ],
        [
          "/other/git/删除github项目中指定目录或文件",
          "删除github项目中指定目录或文件"
        ]
      ],
      "/other/docker/": [
        [
          "/other/docker/",
          "docker基础知识"
        ],
        [
          "/other/docker/Dockerfile-Note",
          "Dockerfile-Note"
        ],
        [
          "/other/docker/docker部署vue静态项目",
          "docker部署vue静态项目"
        ],
        [
          "/other/docker/docker-compose部署项目",
          "docker-compose部署项目"
        ]
      ],
      "/other/life/": [
        [
          "/other/life/",
          "2019一路走来"
        ],
        [
          "/other/life/我的2018年总结",
          "我的2018年总结"
        ]
      ]
    },
    "nav": [
      {
        "text": "首页",
        "link": "/"
      },
      {
        "text": "🍃前端",
        "link": "/front-end/"
      },
      {
        "text": "📒笔记",
        "link": "/notes/"
      },
      {
        "text": "🌿Flutter",
        "items": [
          {
            "text": "文章",
            "link": "/flutter/article/"
          },
          {
            "text": "组件",
            "link": "/flutter/widgets/"
          }
        ]
      },
      {
        "text": "🌱其他",
        "items": [
          {
            "text": "git",
            "link": "/other/git/"
          },
          {
            "text": "docker",
            "link": "/other/docker/"
          },
          {
            "text": "生活记录",
            "link": "/other/life/"
          }
        ]
      },
      {
        "text": "🌈联系",
        "items": [
          {
            "text": "Github",
            "link": "https://github.com/xieyezi"
          },
          {
            "text": "掘金",
            "link": "https://juejin.im/user/5c1cfe85e51d4511851c478d/posts"
          },
          {
            "text": "微信",
            "link": "https://i.loli.net/2020/04/05/itpSUfw1vNQc3sH.jpg"
          }
        ]
      }
    ]
  }
}